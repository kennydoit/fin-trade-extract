-- ============================================================================
-- WATERMARKING STRATEGY: Enhanced Data Tracking and Change Detection
-- Adds comprehensive watermarking to support incremental loading and monitoring
-- ============================================================================

USE DATABASE FIN_TRADE_EXTRACT;
USE WAREHOUSE FIN_TRADE_WH;
USE SCHEMA RAW;

-- ============================================================================
-- STEP 1: Add watermarking columns to existing table (safe for re-runs)
-- ============================================================================

-- Create a procedure to safely add columns only if they don't exist
CREATE OR REPLACE PROCEDURE ADD_WATERMARKING_COLUMNS()
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
    result_message STRING DEFAULT 'Watermarking columns added or already exist';
    column_count INTEGER;
BEGIN
    -- Check and add LOAD_TIMESTAMP
    SELECT COUNT(*) INTO column_count FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = 'RAW' AND TABLE_NAME = 'OVERVIEW' AND COLUMN_NAME = 'LOAD_TIMESTAMP';
    
    IF (column_count = 0) THEN
        ALTER TABLE OVERVIEW ADD COLUMN LOAD_TIMESTAMP TIMESTAMP_NTZ;
    END IF;
    
    -- Check and add BATCH_ID
    SELECT COUNT(*) INTO column_count FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = 'RAW' AND TABLE_NAME = 'OVERVIEW' AND COLUMN_NAME = 'BATCH_ID';
    
    IF (column_count = 0) THEN
        ALTER TABLE OVERVIEW ADD COLUMN BATCH_ID VARCHAR(50);
    END IF;
    
    -- Check and add DATA_VERSION
    SELECT COUNT(*) INTO column_count FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = 'RAW' AND TABLE_NAME = 'OVERVIEW' AND COLUMN_NAME = 'DATA_VERSION';
    
    IF (column_count = 0) THEN
        ALTER TABLE OVERVIEW ADD COLUMN DATA_VERSION INTEGER;
    END IF;
    
    -- Check and add SOURCE_FILE_NAME
    SELECT COUNT(*) INTO column_count FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = 'RAW' AND TABLE_NAME = 'OVERVIEW' AND COLUMN_NAME = 'SOURCE_FILE_NAME';
    
    IF (column_count = 0) THEN
        ALTER TABLE OVERVIEW ADD COLUMN SOURCE_FILE_NAME VARCHAR(255);
    END IF;
    
    -- Check and add RECORD_HASH
    SELECT COUNT(*) INTO column_count FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = 'RAW' AND TABLE_NAME = 'OVERVIEW' AND COLUMN_NAME = 'RECORD_HASH';
    
    IF (column_count = 0) THEN
        ALTER TABLE OVERVIEW ADD COLUMN RECORD_HASH VARCHAR(64);
    END IF;
    
    RETURN result_message;
END;
$$;

-- Execute the procedure to add columns safely
CALL ADD_WATERMARKING_COLUMNS();

-- ============================================================================
-- STEP 2: Create watermark control table
-- ============================================================================

CREATE OR REPLACE TABLE DATA_WATERMARKS (
    SOURCE_SYSTEM VARCHAR(50),
    TABLE_NAME VARCHAR(50),
    LAST_UPDATE_TIMESTAMP TIMESTAMP_NTZ,
    LAST_BATCH_ID VARCHAR(50),
    RECORDS_PROCESSED INTEGER,
    PROCESSING_STATUS VARCHAR(20), -- RUNNING, COMPLETED, FAILED
    ERROR_MESSAGE VARCHAR(500),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP
);

-- Initialize watermark for OVERVIEW table
INSERT INTO DATA_WATERMARKS (SOURCE_SYSTEM, TABLE_NAME, LAST_UPDATE_TIMESTAMP, LAST_BATCH_ID, RECORDS_PROCESSED, PROCESSING_STATUS)
VALUES ('LAMBDA_ALPHA_VANTAGE', 'OVERVIEW', CURRENT_TIMESTAMP, TO_CHAR(CURRENT_TIMESTAMP, 'YYYYMMDDHH24MISS'), 0, 'INITIALIZED');

-- ============================================================================
-- STEP 3: Create enhanced loading procedure with watermarking
-- ============================================================================

CREATE OR REPLACE PROCEDURE LOAD_OVERVIEW_WITH_WATERMARKS(BATCH_ID_INPUT STRING DEFAULT NULL)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
    batch_id STRING DEFAULT COALESCE(BATCH_ID_INPUT, TO_CHAR(CURRENT_TIMESTAMP, 'YYYYMMDDHH24MISS'));
    records_loaded INTEGER DEFAULT 0;
    result_message STRING;
BEGIN
    -- Update watermark status to RUNNING
    UPDATE DATA_WATERMARKS 
    SET PROCESSING_STATUS = 'RUNNING',
        LAST_BATCH_ID = batch_id,
        UPDATED_AT = CURRENT_TIMESTAMP
    WHERE SOURCE_SYSTEM = 'LAMBDA_ALPHA_VANTAGE' AND TABLE_NAME = 'OVERVIEW';
    
    -- Load data with watermarking
    COPY INTO OVERVIEW (
        SYMBOL, ASSET_TYPE, NAME, DESCRIPTION, CIK, EXCHANGE, CURRENCY, COUNTRY, SECTOR, INDUSTRY,
        ADDRESS, FISCAL_YEAR_END, LATEST_QUARTER, MARKET_CAPITALIZATION, EBITDA, PE_RATIO, PEG_RATIO,
        BOOK_VALUE, DIVIDEND_PER_SHARE, DIVIDEND_YIELD, EPS, REVENUE_PER_SHARE_TTM, PROFIT_MARGIN,
        OPERATING_MARGIN_TTM, RETURN_ON_ASSETS_TTM, RETURN_ON_EQUITY_TTM, REVENUE_TTM, GROSS_PROFIT_TTM,
        DILUTED_EPS_TTM, QUARTERLY_EARNINGS_GROWTH_YOY, QUARTERLY_REVENUE_GROWTH_YOY, ANALYST_TARGET_PRICE,
        TRAILING_PE, FORWARD_PE, PRICE_TO_SALES_RATIO_TTM, PRICE_TO_BOOK_RATIO, EV_TO_REVENUE,
        EV_TO_EBITDA, BETA, WEEK_52_HIGH, WEEK_52_LOW, DAY_50_MOVING_AVERAGE, DAY_200_MOVING_AVERAGE,
        SHARES_OUTSTANDING, DIVIDEND_DATE, EX_DIVIDEND_DATE, SYMBOL_ID,
        -- Watermarking columns
        LOAD_TIMESTAMP, BATCH_ID, DATA_VERSION, SOURCE_FILE_NAME, RECORD_HASH
    )
    FROM (
        SELECT 
            *,
            CURRENT_TIMESTAMP as LOAD_TIMESTAMP,
            batch_id as BATCH_ID,
            1 as DATA_VERSION,
            METADATA$FILENAME as SOURCE_FILE_NAME,
            MD5(CONCAT_WS('|', SYMBOL, NAME, MARKET_CAPITALIZATION, PE_RATIO, DIVIDEND_YIELD)) as RECORD_HASH
        FROM @OVERVIEW_STAGE
    )
    FILE_FORMAT = (FORMAT_NAME = 'CSV_FORMAT')
    ON_ERROR = 'CONTINUE'
    FORCE = TRUE;
    
    -- Get number of records loaded
    SELECT COUNT(*) INTO records_loaded FROM OVERVIEW WHERE BATCH_ID = batch_id;
    
    -- Update watermark with completion status
    UPDATE DATA_WATERMARKS 
    SET PROCESSING_STATUS = 'COMPLETED',
        RECORDS_PROCESSED = records_loaded,
        LAST_UPDATE_TIMESTAMP = CURRENT_TIMESTAMP,
        UPDATED_AT = CURRENT_TIMESTAMP
    WHERE SOURCE_SYSTEM = 'LAMBDA_ALPHA_VANTAGE' AND TABLE_NAME = 'OVERVIEW';
    
    SET result_message = 'Successfully loaded ' || records_loaded || ' records with batch_id: ' || batch_id;
    RETURN result_message;
    
EXCEPTION
    WHEN OTHER THEN
        -- Update watermark with error status
        UPDATE DATA_WATERMARKS 
        SET PROCESSING_STATUS = 'FAILED',
            ERROR_MESSAGE = SQLERRM,
            UPDATED_AT = CURRENT_TIMESTAMP
        WHERE SOURCE_SYSTEM = 'LAMBDA_ALPHA_VANTAGE' AND TABLE_NAME = 'OVERVIEW';
        
        RETURN 'Error loading data: ' || SQLERRM;
END;
$$;

-- ============================================================================
-- STEP 4: Create change detection views
-- ============================================================================

-- View to identify new records since last successful load
CREATE OR REPLACE VIEW NEW_RECORDS_SINCE_LAST_LOAD AS
SELECT o.*
FROM OVERVIEW o
WHERE o.LOAD_TIMESTAMP > (
    SELECT COALESCE(MAX(LAST_UPDATE_TIMESTAMP), '1900-01-01'::TIMESTAMP_NTZ)
    FROM DATA_WATERMARKS 
    WHERE SOURCE_SYSTEM = 'LAMBDA_ALPHA_VANTAGE' 
    AND TABLE_NAME = 'OVERVIEW' 
    AND PROCESSING_STATUS = 'COMPLETED'
);

-- View to track data freshness by symbol
CREATE OR REPLACE VIEW DATA_FRESHNESS_BY_SYMBOL AS
SELECT 
    SYMBOL,
    MAX(LOAD_TIMESTAMP) as LAST_UPDATED,
    DATEDIFF('hour', MAX(LOAD_TIMESTAMP), CURRENT_TIMESTAMP) as HOURS_SINCE_UPDATE,
    CASE 
        WHEN DATEDIFF('hour', MAX(LOAD_TIMESTAMP), CURRENT_TIMESTAMP) <= 24 THEN 'FRESH'
        WHEN DATEDIFF('hour', MAX(LOAD_TIMESTAMP), CURRENT_TIMESTAMP) <= 72 THEN 'STALE'
        ELSE 'VERY_STALE'
    END as FRESHNESS_STATUS,
    COUNT(*) as TOTAL_VERSIONS
FROM OVERVIEW
GROUP BY SYMBOL
ORDER BY LAST_UPDATED DESC;

-- View to detect data changes using record hashes
CREATE OR REPLACE VIEW DATA_CHANGE_DETECTION AS
WITH latest_batch AS (
    SELECT MAX(BATCH_ID) as latest_batch_id FROM OVERVIEW
),
previous_batch AS (
    SELECT MAX(BATCH_ID) as previous_batch_id 
    FROM OVERVIEW 
    WHERE BATCH_ID < (SELECT latest_batch_id FROM latest_batch)
)
SELECT 
    COALESCE(l.SYMBOL, p.SYMBOL) as SYMBOL,
    CASE 
        WHEN l.SYMBOL IS NULL THEN 'DELETED'
        WHEN p.SYMBOL IS NULL THEN 'NEW'
        WHEN l.RECORD_HASH != p.RECORD_HASH THEN 'CHANGED'
        ELSE 'UNCHANGED'
    END as CHANGE_TYPE,
    l.MARKET_CAPITALIZATION as CURRENT_MARKET_CAP,
    p.MARKET_CAPITALIZATION as PREVIOUS_MARKET_CAP,
    l.LOAD_TIMESTAMP as CURRENT_LOAD_TIME,
    p.LOAD_TIMESTAMP as PREVIOUS_LOAD_TIME
FROM (SELECT * FROM OVERVIEW WHERE BATCH_ID = (SELECT latest_batch_id FROM latest_batch)) l
FULL OUTER JOIN (SELECT * FROM OVERVIEW WHERE BATCH_ID = (SELECT previous_batch_id FROM previous_batch)) p
    ON l.SYMBOL = p.SYMBOL
WHERE COALESCE(l.RECORD_HASH, 'NULL') != COALESCE(p.RECORD_HASH, 'NULL');

-- ============================================================================
-- STEP 5: Create monitoring and alerting views
-- ============================================================================

-- Data quality monitoring view
CREATE OR REPLACE VIEW DATA_QUALITY_METRICS AS
SELECT 
    BATCH_ID,
    LOAD_TIMESTAMP,
    COUNT(*) as TOTAL_RECORDS,
    COUNT(DISTINCT SYMBOL) as UNIQUE_SYMBOLS,
    COUNT(CASE WHEN NAME IS NOT NULL AND TRIM(NAME) != '' THEN 1 END) as RECORDS_WITH_NAME,
    COUNT(CASE WHEN MARKET_CAPITALIZATION IS NOT NULL AND MARKET_CAPITALIZATION > 0 THEN 1 END) as RECORDS_WITH_VALID_MARKET_CAP,
    COUNT(CASE WHEN PE_RATIO IS NOT NULL AND PE_RATIO > 0 THEN 1 END) as RECORDS_WITH_VALID_PE,
    ROUND(AVG(MARKET_CAPITALIZATION) / 1000000000, 2) as AVG_MARKET_CAP_BILLIONS,
    MIN(LOAD_TIMESTAMP) as BATCH_START_TIME,
    MAX(LOAD_TIMESTAMP) as BATCH_END_TIME
FROM OVERVIEW
GROUP BY BATCH_ID, LOAD_TIMESTAMP
ORDER BY LOAD_TIMESTAMP DESC;

-- Processing status dashboard
CREATE OR REPLACE VIEW PROCESSING_STATUS_DASHBOARD AS
SELECT 
    SOURCE_SYSTEM,
    TABLE_NAME,
    PROCESSING_STATUS,
    LAST_UPDATE_TIMESTAMP,
    LAST_BATCH_ID,
    RECORDS_PROCESSED,
    DATEDIFF('minute', LAST_UPDATE_TIMESTAMP, CURRENT_TIMESTAMP) as MINUTES_SINCE_LAST_UPDATE,
    CASE 
        WHEN PROCESSING_STATUS = 'RUNNING' AND DATEDIFF('minute', LAST_UPDATE_TIMESTAMP, CURRENT_TIMESTAMP) > 60 THEN 'STUCK_PROCESS'
        WHEN PROCESSING_STATUS = 'FAILED' THEN 'NEEDS_ATTENTION'
        WHEN DATEDIFF('hour', LAST_UPDATE_TIMESTAMP, CURRENT_TIMESTAMP) > 24 THEN 'STALE_DATA'
        ELSE 'HEALTHY'
    END as ALERT_STATUS,
    ERROR_MESSAGE
FROM DATA_WATERMARKS
ORDER BY LAST_UPDATE_TIMESTAMP DESC;

SELECT 'WATERMARKING SETUP COMPLETE' as status;
SELECT 'Run: CALL LOAD_OVERVIEW_WITH_WATERMARKS(); to test the enhanced loading' as next_step;