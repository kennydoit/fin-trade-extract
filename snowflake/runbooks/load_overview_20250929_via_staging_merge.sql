-- Load 2025-09-29 overview CSV files into staging, then MERGE into RAW.OVERVIEW
-- Use when final table has legacy column names (e.g., BATCH_ID, SOURCE_FILE_NAME)

USE DATABASE FIN_TRADE_EXTRACT;
USE SCHEMA RAW;
USE WAREHOUSE FIN_TRADE_WH;

-- Parameters for batch metadata
SET BATCH_ID = 'MANUAL_LOAD_20250928';
SET SOURCE_FILE_NAME = 'staging_load';

-- 1) Create staging table that matches CSV exactly (no extra columns)
CREATE OR REPLACE TABLE RAW.OVERVIEW_STAGING (
  SYMBOL_ID VARCHAR(50),
  SYMBOL VARCHAR(20),
  ASSET_TYPE VARCHAR(50),
  NAME VARCHAR(500),
  DESCRIPTION TEXT,
  CIK VARCHAR(20),
  EXCHANGE VARCHAR(50),
  CURRENCY VARCHAR(10),
  COUNTRY VARCHAR(100),
  SECTOR VARCHAR(100),
  INDUSTRY VARCHAR(200),
  ADDRESS TEXT,
  OFFICIAL_SITE VARCHAR(500),
  FISCAL_YEAR_END VARCHAR(50),
  MARKET_CAPITALIZATION VARCHAR(50),
  EBITDA VARCHAR(50),
  PE_RATIO VARCHAR(50),
  PEG_RATIO VARCHAR(50),
  BOOK_VALUE VARCHAR(50),
  DIVIDEND_PER_SHARE VARCHAR(50),
  DIVIDEND_YIELD VARCHAR(50),
  EPS VARCHAR(50),
  REVENUE_PER_SHARE_TTM VARCHAR(50),
  PROFIT_MARGIN VARCHAR(50),
  OPERATING_MARGIN_TTM VARCHAR(50),
  RETURN_ON_ASSETS_TTM VARCHAR(50),
  RETURN_ON_EQUITY_TTM VARCHAR(50),
  REVENUE_TTM VARCHAR(50),
  GROSS_PROFIT_TTM VARCHAR(50),
  DILUTED_EPS_TTM VARCHAR(50),
  QUARTERLY_EARNINGS_GROWTH_YOY VARCHAR(50),
  QUARTERLY_REVENUE_GROWTH_YOY VARCHAR(50),
  ANALYST_TARGET_PRICE VARCHAR(50),
  TRAILING_PE VARCHAR(50),
  FORWARD_PE VARCHAR(50),
  PRICE_TO_SALES_RATIO_TTM VARCHAR(50),
  PRICE_TO_BOOK_RATIO VARCHAR(50),
  EV_TO_REVENUE VARCHAR(50),
  EV_TO_EBITDA VARCHAR(50),
  BETA VARCHAR(50),
  WEEK_52_HIGH VARCHAR(50),
  WEEK_52_LOW VARCHAR(50),
  DAY_50_MOVING_AVERAGE VARCHAR(50),
  DAY_200_MOVING_AVERAGE VARCHAR(50),
  SHARES_OUTSTANDING VARCHAR(50),
  DIVIDEND_DATE VARCHAR(50),
  EX_DIVIDEND_DATE VARCHAR(50),
  API_RESPONSE_STATUS VARCHAR(50),
  CREATED_AT VARCHAR(50),
  UPDATED_AT VARCHAR(50)
);

-- 2) Copy 2025-09-29 files into staging
COPY INTO RAW.OVERVIEW_STAGING
FROM @OVERVIEW_STAGE
PATTERN = '.*overview_20250929.*\\.csv'
FILE_FORMAT = (FORMAT_NAME = CSV_FORMAT)
ON_ERROR = 'CONTINUE';

-- 3) Merge into final table (legacy schema) on SYMBOL
-- 3) Merge into final table (legacy schema) on SYMBOL
MERGE INTO RAW.OVERVIEW AS tgt
USING (
  WITH stg AS (
    SELECT
      *,
      TRY_TO_TIMESTAMP_NTZ(CREATED_AT) AS CREATED_AT_TS,
      TRY_TO_TIMESTAMP_NTZ(UPDATED_AT) AS UPDATED_AT_TS,
      ROW_NUMBER() OVER (
        PARTITION BY SYMBOL
        ORDER BY TRY_TO_TIMESTAMP_NTZ(UPDATED_AT) DESC NULLS LAST,
                 TRY_TO_TIMESTAMP_NTZ(CREATED_AT) DESC NULLS LAST
      ) AS rn
    FROM RAW.OVERVIEW_STAGING
    WHERE SYMBOL IS NOT NULL AND TRIM(SYMBOL) <> ''
  )
  SELECT
    SYMBOL_ID,
    SYMBOL,
    ASSET_TYPE,
    NAME,
    DESCRIPTION,
    CIK,
    EXCHANGE,
    CURRENCY,
    COUNTRY,
    SECTOR,
    INDUSTRY,
    ADDRESS,
    OFFICIAL_SITE,
    FISCAL_YEAR_END,
    API_RESPONSE_STATUS,
    CREATED_AT_TS,
    UPDATED_AT_TS,
    -- numeric conversions where applicable
    TRY_TO_DECIMAL(NULLIF(MARKET_CAPITALIZATION,'')) AS MARKET_CAPITALIZATION,
    TRY_TO_DECIMAL(NULLIF(EBITDA,'')) AS EBITDA,
    TRY_TO_DECIMAL(NULLIF(PE_RATIO,'')) AS PE_RATIO,
    TRY_TO_DECIMAL(NULLIF(PEG_RATIO,'')) AS PEG_RATIO,
    TRY_TO_DECIMAL(NULLIF(BOOK_VALUE,'')) AS BOOK_VALUE,
    TRY_TO_DECIMAL(NULLIF(DIVIDEND_PER_SHARE,'')) AS DIVIDEND_PER_SHARE,
    TRY_TO_DECIMAL(NULLIF(DIVIDEND_YIELD,'')) AS DIVIDEND_YIELD,
    TRY_TO_DECIMAL(NULLIF(EPS,'')) AS EPS,
    TRY_TO_DECIMAL(NULLIF(REVENUE_PER_SHARE_TTM,'')) AS REVENUE_PER_SHARE_TTM,
    TRY_TO_DECIMAL(NULLIF(PROFIT_MARGIN,'')) AS PROFIT_MARGIN,
    TRY_TO_DECIMAL(NULLIF(OPERATING_MARGIN_TTM,'')) AS OPERATING_MARGIN_TTM,
    TRY_TO_DECIMAL(NULLIF(RETURN_ON_ASSETS_TTM,'')) AS RETURN_ON_ASSETS_TTM,
    TRY_TO_DECIMAL(NULLIF(RETURN_ON_EQUITY_TTM,'')) AS RETURN_ON_EQUITY_TTM,
    TRY_TO_DECIMAL(NULLIF(REVENUE_TTM,'')) AS REVENUE_TTM,
    TRY_TO_DECIMAL(NULLIF(GROSS_PROFIT_TTM,'')) AS GROSS_PROFIT_TTM,
    TRY_TO_DECIMAL(NULLIF(DILUTED_EPS_TTM,'')) AS DILUTED_EPS_TTM,
    TRY_TO_DECIMAL(NULLIF(QUARTERLY_EARNINGS_GROWTH_YOY,'')) AS QUARTERLY_EARNINGS_GROWTH_YOY,
    TRY_TO_DECIMAL(NULLIF(QUARTERLY_REVENUE_GROWTH_YOY,'')) AS QUARTERLY_REVENUE_GROWTH_YOY,
    TRY_TO_DECIMAL(NULLIF(ANALYST_TARGET_PRICE,'')) AS ANALYST_TARGET_PRICE,
    TRY_TO_DECIMAL(NULLIF(TRAILING_PE,'')) AS TRAILING_PE,
    TRY_TO_DECIMAL(NULLIF(FORWARD_PE,'')) AS FORWARD_PE,
    TRY_TO_DECIMAL(NULLIF(PRICE_TO_SALES_RATIO_TTM,'')) AS PRICE_TO_SALES_RATIO_TTM,
    TRY_TO_DECIMAL(NULLIF(PRICE_TO_BOOK_RATIO,'')) AS PRICE_TO_BOOK_RATIO,
    TRY_TO_DECIMAL(NULLIF(EV_TO_REVENUE,'')) AS EV_TO_REVENUE,
    TRY_TO_DECIMAL(NULLIF(EV_TO_EBITDA,'')) AS EV_TO_EBITDA,
    TRY_TO_DECIMAL(NULLIF(BETA,'')) AS BETA,
    TRY_TO_DECIMAL(NULLIF(WEEK_52_HIGH,'')) AS WEEK_52_HIGH,
    TRY_TO_DECIMAL(NULLIF(WEEK_52_LOW,'')) AS WEEK_52_LOW,
    TRY_TO_DECIMAL(NULLIF(DAY_50_MOVING_AVERAGE,'')) AS DAY_50_MOVING_AVERAGE,
    TRY_TO_DECIMAL(NULLIF(DAY_200_MOVING_AVERAGE,'')) AS DAY_200_MOVING_AVERAGE,
    TRY_TO_DECIMAL(NULLIF(SHARES_OUTSTANDING,'')) AS SHARES_OUTSTANDING,
    TRY_TO_DATE(NULLIF(DIVIDEND_DATE,'')) AS DIVIDEND_DATE,
    TRY_TO_DATE(NULLIF(EX_DIVIDEND_DATE,'')) AS EX_DIVIDEND_DATE
  FROM stg
  WHERE rn = 1
) AS src
ON tgt.SYMBOL = src.SYMBOL
WHEN MATCHED THEN UPDATE SET
  tgt.SYMBOL_ID = src.SYMBOL_ID,
  tgt.ASSET_TYPE = src.ASSET_TYPE,
  tgt.NAME = src.NAME,
  tgt.DESCRIPTION = src.DESCRIPTION,
  tgt.CIK = src.CIK,
  tgt.EXCHANGE = src.EXCHANGE,
  tgt.CURRENCY = src.CURRENCY,
  tgt.COUNTRY = src.COUNTRY,
  tgt.SECTOR = src.SECTOR,
  tgt.INDUSTRY = src.INDUSTRY,
  tgt.ADDRESS = src.ADDRESS,
  tgt.OFFICIALSITE = src.OFFICIAL_SITE,
  tgt.FISCALYEAREND = src.FISCAL_YEAR_END,
  tgt.STATUS = src.API_RESPONSE_STATUS,
  tgt.CREATED_AT = src.CREATED_AT_TS,
  tgt.UPDATED_AT = src.UPDATED_AT_TS,
  tgt.BATCH_ID = $BATCH_ID,
  tgt.SOURCE_FILE_NAME = $SOURCE_FILE_NAME
WHEN NOT MATCHED THEN INSERT (
  SYMBOL_ID, SYMBOL, ASSET_TYPE, NAME, DESCRIPTION, CIK, EXCHANGE,
  CURRENCY, COUNTRY, SECTOR, INDUSTRY, ADDRESS, OFFICIALSITE,
  FISCALYEAREND, STATUS, CREATED_AT, UPDATED_AT,
  BATCH_ID, SOURCE_FILE_NAME
) VALUES (
  src.SYMBOL_ID, src.SYMBOL, src.ASSET_TYPE, src.NAME, src.DESCRIPTION, src.CIK, src.EXCHANGE,
  src.CURRENCY, src.COUNTRY, src.SECTOR, src.INDUSTRY, src.ADDRESS, src.OFFICIAL_SITE,
  src.FISCAL_YEAR_END, src.API_RESPONSE_STATUS, src.CREATED_AT_TS, src.UPDATED_AT_TS,
  $BATCH_ID, $SOURCE_FILE_NAME
);

-- 4) Verify
SELECT COUNT(*) AS records_after FROM RAW.OVERVIEW;
SELECT * FROM RAW.OVERVIEW ORDER BY CREATED_AT DESC NULLS LAST LIMIT 20;

-- 5) Optional: clean up staging
-- TRUNCATE TABLE RAW.OVERVIEW_STAGING;
