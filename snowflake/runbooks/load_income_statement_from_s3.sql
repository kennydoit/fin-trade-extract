-- ============================================================================
-- Load Income Statement Data from S3 to Snowflake
-- 
-- Purpose: Loads income statement data from S3 staged files
-- Source: Alpha Vantage INCOME_STATEMENT API endpoint
-- Destination: FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT
-- Update Strategy: MERGE (upsert based on SYMBOL + FISCAL_DATE_ENDING + PERIOD_TYPE)
-- ============================================================================

USE DATABASE FIN_TRADE_EXTRACT;
USE SCHEMA RAW;
USE WAREHOUSE FIN_TRADE_WH;
USE ROLE ETL_ROLE;

-- Step 1: Create external stage pointing to S3 income statement folder
CREATE OR REPLACE STAGE FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT_STAGE
  URL='s3://fin-trade-craft-landing/income_statement/'
  STORAGE_INTEGRATION = FIN_TRADE_S3_INTEGRATION
  FILE_FORMAT = (
    TYPE = 'CSV'
    COMPRESSION = 'AUTO'
    FIELD_DELIMITER = ','
    RECORD_DELIMITER = '\n'
    SKIP_HEADER = 1
    NULL_IF = ('NULL', 'null', '', 'None')
    EMPTY_FIELD_AS_NULL = TRUE
    FIELD_OPTIONALLY_ENCLOSED_BY = '"'
    TRIM_SPACE = TRUE
    ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
    ENCODING = 'UTF8'
  );

-- Step 2: List files in stage to verify content
-- LIST @INCOME_STATEMENT_STAGE;

-- Step 3: Create the target table if it doesn't exist
CREATE TABLE IF NOT EXISTS FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT (
    SYMBOL VARCHAR(20) NOT NULL,
    FISCAL_DATE_ENDING DATE NOT NULL,
    PERIOD_TYPE VARCHAR(20) NOT NULL,  -- 'annual' or 'quarterly'
    REPORTED_CURRENCY VARCHAR(10),
    
    -- Revenue Metrics
    GROSS_PROFIT NUMBER(20, 2),
    TOTAL_REVENUE NUMBER(20, 2),
    COST_OF_REVENUE NUMBER(20, 2),
    COST_OF_GOODS_AND_SERVICES_SOLD NUMBER(20, 2),
    
    -- Operating Expenses
    OPERATING_INCOME NUMBER(20, 2),
    SELLING_GENERAL_AND_ADMINISTRATIVE NUMBER(20, 2),
    RESEARCH_AND_DEVELOPMENT NUMBER(20, 2),
    OPERATING_EXPENSES NUMBER(20, 2),
    INVESTMENT_INCOME_NET NUMBER(20, 2),
    
    -- Interest & Other Income
    NET_INTEREST_INCOME NUMBER(20, 2),
    INTEREST_INCOME NUMBER(20, 2),
    INTEREST_EXPENSE NUMBER(20, 2),
    NON_INTEREST_INCOME NUMBER(20, 2),
    OTHER_NON_OPERATING_INCOME NUMBER(20, 2),
    
    -- Depreciation & Amortization
    DEPRECIATION NUMBER(20, 2),
    DEPRECIATION_AND_AMORTIZATION NUMBER(20, 2),
    
    -- Income Before Tax
    INCOME_BEFORE_TAX NUMBER(20, 2),
    INCOME_TAX_EXPENSE NUMBER(20, 2),
    INTEREST_AND_DEBT_EXPENSE NUMBER(20, 2),
    
    -- Net Income
    NET_INCOME_FROM_CONTINUING_OPERATIONS NUMBER(20, 2),
    COMPREHENSIVE_INCOME_NET_OF_TAX NUMBER(20, 2),
    
    -- Earnings Before Interest & Taxes
    EBIT NUMBER(20, 2),
    EBITDA NUMBER(20, 2),
    
    -- Net Income (Bottom Line)
    NET_INCOME NUMBER(20, 2),
    
    -- Metadata
    SYMBOL_ID NUMBER(38, 0),
    LOAD_DATE DATE DEFAULT CURRENT_DATE(),
    
    -- Constraints
    CONSTRAINT PK_INCOME_STATEMENT PRIMARY KEY (SYMBOL, FISCAL_DATE_ENDING, PERIOD_TYPE)
);

-- Add comment to table
COMMENT ON TABLE FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT IS 
'Income statement data from Alpha Vantage. Contains both annual and quarterly income statement metrics including revenue, expenses, and net income. Updated via watermark-based ETL.';

-- Step 4: Create a transient staging table for loading data from S3
CREATE OR REPLACE TRANSIENT TABLE FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT_STAGING (
    SYMBOL VARCHAR(20),
    FISCAL_DATE_ENDING VARCHAR(50),
    PERIOD_TYPE VARCHAR(20),
    REPORTED_CURRENCY VARCHAR(10),
    GROSS_PROFIT VARCHAR(50),
    TOTAL_REVENUE VARCHAR(50),
    COST_OF_REVENUE VARCHAR(50),
    COST_OF_GOODS_AND_SERVICES_SOLD VARCHAR(50),
    OPERATING_INCOME VARCHAR(50),
    SELLING_GENERAL_AND_ADMINISTRATIVE VARCHAR(50),
    RESEARCH_AND_DEVELOPMENT VARCHAR(50),
    OPERATING_EXPENSES VARCHAR(50),
    INVESTMENT_INCOME_NET VARCHAR(50),
    NET_INTEREST_INCOME VARCHAR(50),
    INTEREST_INCOME VARCHAR(50),
    INTEREST_EXPENSE VARCHAR(50),
    NON_INTEREST_INCOME VARCHAR(50),
    OTHER_NON_OPERATING_INCOME VARCHAR(50),
    DEPRECIATION VARCHAR(50),
    DEPRECIATION_AND_AMORTIZATION VARCHAR(50),
    INCOME_BEFORE_TAX VARCHAR(50),
    INCOME_TAX_EXPENSE VARCHAR(50),
    INTEREST_AND_DEBT_EXPENSE VARCHAR(50),
    NET_INCOME_FROM_CONTINUING_OPERATIONS VARCHAR(50),
    COMPREHENSIVE_INCOME_NET_OF_TAX VARCHAR(50),
    EBIT VARCHAR(50),
    EBITDA VARCHAR(50),
    NET_INCOME VARCHAR(50)
);

-- Step 5: Copy data from S3 to staging table
COPY INTO FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT_STAGING
FROM @FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT_STAGE
FILE_FORMAT = (
    TYPE = 'CSV'
    FIELD_DELIMITER = ','
    SKIP_HEADER = 1
    FIELD_OPTIONALLY_ENCLOSED_BY = '"'
    NULL_IF = ('None', 'null', '', 'N/A')
    EMPTY_FIELD_AS_NULL = TRUE
    TRIM_SPACE = TRUE
)
PATTERN = '.*\.csv'
ON_ERROR = 'CONTINUE'
FORCE = TRUE;

-- Step 9: Merge staged data into target table
MERGE INTO FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT target
USING (
    SELECT 
        SYMBOL,
        TRY_TO_DATE(FISCAL_DATE_ENDING, 'YYYY-MM-DD') as FISCAL_DATE_ENDING,
        PERIOD_TYPE,
        REPORTED_CURRENCY,
        
        -- Revenue Metrics (convert empty strings/None to NULL, then to NUMBER)
        TRY_TO_NUMBER(NULLIF(GROSS_PROFIT, ''), 20, 2) as GROSS_PROFIT,
        TRY_TO_NUMBER(NULLIF(TOTAL_REVENUE, ''), 20, 2) as TOTAL_REVENUE,
        TRY_TO_NUMBER(NULLIF(COST_OF_REVENUE, ''), 20, 2) as COST_OF_REVENUE,
        TRY_TO_NUMBER(NULLIF(COST_OF_GOODS_AND_SERVICES_SOLD, ''), 20, 2) as COST_OF_GOODS_AND_SERVICES_SOLD,
        
        -- Operating Metrics
        TRY_TO_NUMBER(NULLIF(OPERATING_INCOME, ''), 20, 2) as OPERATING_INCOME,
        TRY_TO_NUMBER(NULLIF(SELLING_GENERAL_AND_ADMINISTRATIVE, ''), 20, 2) as SELLING_GENERAL_AND_ADMINISTRATIVE,
        TRY_TO_NUMBER(NULLIF(RESEARCH_AND_DEVELOPMENT, ''), 20, 2) as RESEARCH_AND_DEVELOPMENT,
        TRY_TO_NUMBER(NULLIF(OPERATING_EXPENSES, ''), 20, 2) as OPERATING_EXPENSES,
        TRY_TO_NUMBER(NULLIF(INVESTMENT_INCOME_NET, ''), 20, 2) as INVESTMENT_INCOME_NET,
        
        -- Interest & Other Income
        TRY_TO_NUMBER(NULLIF(NET_INTEREST_INCOME, ''), 20, 2) as NET_INTEREST_INCOME,
        TRY_TO_NUMBER(NULLIF(INTEREST_INCOME, ''), 20, 2) as INTEREST_INCOME,
        TRY_TO_NUMBER(NULLIF(INTEREST_EXPENSE, ''), 20, 2) as INTEREST_EXPENSE,
        TRY_TO_NUMBER(NULLIF(NON_INTEREST_INCOME, ''), 20, 2) as NON_INTEREST_INCOME,
        TRY_TO_NUMBER(NULLIF(OTHER_NON_OPERATING_INCOME, ''), 20, 2) as OTHER_NON_OPERATING_INCOME,
        
        -- Depreciation
        TRY_TO_NUMBER(NULLIF(DEPRECIATION, ''), 20, 2) as DEPRECIATION,
        TRY_TO_NUMBER(NULLIF(DEPRECIATION_AND_AMORTIZATION, ''), 20, 2) as DEPRECIATION_AND_AMORTIZATION,
        
        -- Tax & Interest
        TRY_TO_NUMBER(NULLIF(INCOME_BEFORE_TAX, ''), 20, 2) as INCOME_BEFORE_TAX,
        TRY_TO_NUMBER(NULLIF(INCOME_TAX_EXPENSE, ''), 20, 2) as INCOME_TAX_EXPENSE,
        TRY_TO_NUMBER(NULLIF(INTEREST_AND_DEBT_EXPENSE, ''), 20, 2) as INTEREST_AND_DEBT_EXPENSE,
        
        -- Net Income Variants
        TRY_TO_NUMBER(NULLIF(NET_INCOME_FROM_CONTINUING_OPERATIONS, ''), 20, 2) as NET_INCOME_FROM_CONTINUING_OPERATIONS,
        TRY_TO_NUMBER(NULLIF(COMPREHENSIVE_INCOME_NET_OF_TAX, ''), 20, 2) as COMPREHENSIVE_INCOME_NET_OF_TAX,
        
        -- EBIT/EBITDA
        TRY_TO_NUMBER(NULLIF(EBIT, ''), 20, 2) as EBIT,
        TRY_TO_NUMBER(NULLIF(EBITDA, ''), 20, 2) as EBITDA,
        
        -- Net Income (Bottom Line)
        TRY_TO_NUMBER(NULLIF(NET_INCOME, ''), 20, 2) as NET_INCOME,
        
        -- Metadata
        ABS(HASH(SYMBOL)) % 1000000000 as SYMBOL_ID,
        CURRENT_DATE() as LOAD_DATE
        
    FROM FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT_STAGING
    WHERE SYMBOL IS NOT NULL
      AND FISCAL_DATE_ENDING IS NOT NULL
      AND PERIOD_TYPE IS NOT NULL
      AND TRY_TO_DATE(FISCAL_DATE_ENDING, 'YYYY-MM-DD') IS NOT NULL
) source
ON target.SYMBOL = source.SYMBOL
   AND target.FISCAL_DATE_ENDING = source.FISCAL_DATE_ENDING
   AND target.PERIOD_TYPE = source.PERIOD_TYPE

WHEN MATCHED THEN UPDATE SET
    REPORTED_CURRENCY = source.REPORTED_CURRENCY,
    GROSS_PROFIT = source.GROSS_PROFIT,
    TOTAL_REVENUE = source.TOTAL_REVENUE,
    COST_OF_REVENUE = source.COST_OF_REVENUE,
    COST_OF_GOODS_AND_SERVICES_SOLD = source.COST_OF_GOODS_AND_SERVICES_SOLD,
    OPERATING_INCOME = source.OPERATING_INCOME,
    SELLING_GENERAL_AND_ADMINISTRATIVE = source.SELLING_GENERAL_AND_ADMINISTRATIVE,
    RESEARCH_AND_DEVELOPMENT = source.RESEARCH_AND_DEVELOPMENT,
    OPERATING_EXPENSES = source.OPERATING_EXPENSES,
    INVESTMENT_INCOME_NET = source.INVESTMENT_INCOME_NET,
    NET_INTEREST_INCOME = source.NET_INTEREST_INCOME,
    INTEREST_INCOME = source.INTEREST_INCOME,
    INTEREST_EXPENSE = source.INTEREST_EXPENSE,
    NON_INTEREST_INCOME = source.NON_INTEREST_INCOME,
    OTHER_NON_OPERATING_INCOME = source.OTHER_NON_OPERATING_INCOME,
    DEPRECIATION = source.DEPRECIATION,
    DEPRECIATION_AND_AMORTIZATION = source.DEPRECIATION_AND_AMORTIZATION,
    INCOME_BEFORE_TAX = source.INCOME_BEFORE_TAX,
    INCOME_TAX_EXPENSE = source.INCOME_TAX_EXPENSE,
    INTEREST_AND_DEBT_EXPENSE = source.INTEREST_AND_DEBT_EXPENSE,
    NET_INCOME_FROM_CONTINUING_OPERATIONS = source.NET_INCOME_FROM_CONTINUING_OPERATIONS,
    COMPREHENSIVE_INCOME_NET_OF_TAX = source.COMPREHENSIVE_INCOME_NET_OF_TAX,
    EBIT = source.EBIT,
    EBITDA = source.EBITDA,
    NET_INCOME = source.NET_INCOME,
    SYMBOL_ID = source.SYMBOL_ID,
    LOAD_DATE = source.LOAD_DATE

WHEN NOT MATCHED THEN INSERT (
    SYMBOL, FISCAL_DATE_ENDING, PERIOD_TYPE, REPORTED_CURRENCY,
    GROSS_PROFIT, TOTAL_REVENUE, COST_OF_REVENUE, COST_OF_GOODS_AND_SERVICES_SOLD,
    OPERATING_INCOME, SELLING_GENERAL_AND_ADMINISTRATIVE, RESEARCH_AND_DEVELOPMENT,
    OPERATING_EXPENSES, INVESTMENT_INCOME_NET, NET_INTEREST_INCOME,
    INTEREST_INCOME, INTEREST_EXPENSE, NON_INTEREST_INCOME, OTHER_NON_OPERATING_INCOME,
    DEPRECIATION, DEPRECIATION_AND_AMORTIZATION, INCOME_BEFORE_TAX,
    INCOME_TAX_EXPENSE, INTEREST_AND_DEBT_EXPENSE, NET_INCOME_FROM_CONTINUING_OPERATIONS,
    COMPREHENSIVE_INCOME_NET_OF_TAX, EBIT, EBITDA, NET_INCOME,
    SYMBOL_ID, LOAD_DATE
) VALUES (
    source.SYMBOL, source.FISCAL_DATE_ENDING, source.PERIOD_TYPE, source.REPORTED_CURRENCY,
    source.GROSS_PROFIT, source.TOTAL_REVENUE, source.COST_OF_REVENUE, source.COST_OF_GOODS_AND_SERVICES_SOLD,
    source.OPERATING_INCOME, source.SELLING_GENERAL_AND_ADMINISTRATIVE, source.RESEARCH_AND_DEVELOPMENT,
    source.OPERATING_EXPENSES, source.INVESTMENT_INCOME_NET, source.NET_INTEREST_INCOME,
    source.INTEREST_INCOME, source.INTEREST_EXPENSE, source.NON_INTEREST_INCOME, source.OTHER_NON_OPERATING_INCOME,
    source.DEPRECIATION, source.DEPRECIATION_AND_AMORTIZATION, source.INCOME_BEFORE_TAX,
    source.INCOME_TAX_EXPENSE, source.INTEREST_AND_DEBT_EXPENSE, source.NET_INCOME_FROM_CONTINUING_OPERATIONS,
    source.COMPREHENSIVE_INCOME_NET_OF_TAX, source.EBIT, source.EBITDA, source.NET_INCOME,
    source.SYMBOL_ID, source.LOAD_DATE
);

-- Step 10: Show merge results
SELECT 
    'Merge Complete' as status,
    COUNT(*) as total_records,
    COUNT(DISTINCT SYMBOL) as unique_symbols,
    COUNT(CASE WHEN PERIOD_TYPE = 'annual' THEN 1 END) as annual_records,
    COUNT(CASE WHEN PERIOD_TYPE = 'quarterly' THEN 1 END) as quarterly_records,
    MIN(FISCAL_DATE_ENDING) as earliest_date,
    MAX(FISCAL_DATE_ENDING) as latest_date,
    MAX(LOAD_DATE) as load_date
FROM FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT;

-- Step 11: Sample final data
SELECT 
    'Final Data Sample' as step,
    SYMBOL,
    FISCAL_DATE_ENDING,
    PERIOD_TYPE,
    TOTAL_REVENUE,
    GROSS_PROFIT,
    OPERATING_INCOME,
    NET_INCOME,
    LOAD_DATE
FROM FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT
ORDER BY SYMBOL, FISCAL_DATE_ENDING DESC, PERIOD_TYPE
LIMIT 10;

-- Cleanup staging table
DROP TABLE IF EXISTS FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT_STAGING;

SELECT '✅ Income statement data load complete!' as status;
