-- Load/merge Alpha Vantage COMPANY_OVERVIEW from S3 into RAW.COMPANY_OVERVIEW
-- Automatically processes all CSV files in the company_overview/ prefix

USE DATABASE FIN_TRADE_EXTRACT;
USE SCHEMA RAW;
USE WAREHOUSE FIN_TRADE_WH;
USE ROLE ACCOUNTADMIN;

-- 1) Create stage if needed
CREATE STAGE IF NOT EXISTS FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGE
  URL='s3://fin-trade-craft-landing/company_overview/'
  STORAGE_INTEGRATION = FIN_TRADE_S3_INTEGRATION;

-- 2) Create main table if needed
CREATE TABLE IF NOT EXISTS FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW (
  SYMBOL_ID NUMBER(38,0),
  SYMBOL VARCHAR(20),
  ASSET_TYPE VARCHAR(50),
  NAME VARCHAR(500),
  DESCRIPTION TEXT,
  CIK VARCHAR(20),
  EXCHANGE VARCHAR(50),
  CURRENCY VARCHAR(10),
  COUNTRY VARCHAR(100),
  SECTOR VARCHAR(100),
  INDUSTRY VARCHAR(200),
  ADDRESS TEXT,
  OFFICIAL_SITE VARCHAR(500),
  FISCAL_YEAR_END VARCHAR(50),
  MARKET_CAPITALIZATION NUMBER,
  EBITDA NUMBER,
  PE_RATIO NUMBER,
  PEG_RATIO NUMBER,
  BOOK_VALUE NUMBER,
  DIVIDEND_PER_SHARE NUMBER,
  DIVIDEND_YIELD NUMBER,
  EPS NUMBER,
  REVENUE_PER_SHARE_TTM NUMBER,
  PROFIT_MARGIN NUMBER,
  OPERATING_MARGIN_TTM NUMBER,
  RETURN_ON_ASSETS_TTM NUMBER,
  RETURN_ON_EQUITY_TTM NUMBER,
  REVENUE_TTM NUMBER,
  GROSS_PROFIT_TTM NUMBER,
  DILUTED_EPS_TTM NUMBER,
  QUARTERLY_EARNINGS_GROWTH_YOY NUMBER,
  QUARTERLY_REVENUE_GROWTH_YOY NUMBER,
  ANALYST_TARGET_PRICE NUMBER,
  TRAILING_PE NUMBER,
  FORWARD_PE NUMBER,
  PRICE_TO_SALES_RATIO_TTM NUMBER,
  PRICE_TO_BOOK_RATIO NUMBER,
  EV_TO_REVENUE NUMBER,
  EV_TO_EBITDA NUMBER,
  BETA NUMBER,
  WEEK_52_HIGH NUMBER,
  WEEK_52_LOW NUMBER,
  DAY_50_MOVING_AVERAGE NUMBER,
  DAY_200_MOVING_AVERAGE NUMBER,
  SHARES_OUTSTANDING NUMBER,
  DIVIDEND_DATE DATE,
  EX_DIVIDEND_DATE DATE,
  LATEST_QUARTER DATE,
  PROCESSED_DATE DATE,
  LOAD_DATE VARCHAR(50),
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- 3) Load files into staging table
CREATE OR REPLACE TRANSIENT TABLE FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING (
  SYMBOL_ID NUMBER(38,0),
  SYMBOL VARCHAR(20),
  ASSET_TYPE VARCHAR(50),
  NAME VARCHAR(500),
  DESCRIPTION TEXT,
  CIK VARCHAR(20),
  EXCHANGE VARCHAR(50),
  CURRENCY VARCHAR(10),
  COUNTRY VARCHAR(100),
  SECTOR VARCHAR(100),
  INDUSTRY VARCHAR(200),
  ADDRESS TEXT,
  OFFICIAL_SITE VARCHAR(500),
  FISCAL_YEAR_END VARCHAR(50),
  MARKET_CAPITALIZATION VARCHAR(50),
  EBITDA VARCHAR(50),
  PE_RATIO VARCHAR(50),
  PEG_RATIO VARCHAR(50),
  BOOK_VALUE VARCHAR(50),
  DIVIDEND_PER_SHARE VARCHAR(50),
  DIVIDEND_YIELD VARCHAR(50),
  EPS VARCHAR(50),
  REVENUE_PER_SHARE_TTM VARCHAR(50),
  PROFIT_MARGIN VARCHAR(50),
  OPERATING_MARGIN_TTM VARCHAR(50),
  RETURN_ON_ASSETS_TTM VARCHAR(50),
  RETURN_ON_EQUITY_TTM VARCHAR(50),
  REVENUE_TTM VARCHAR(50),
  GROSS_PROFIT_TTM VARCHAR(50),
  DILUTED_EPS_TTM VARCHAR(50),
  QUARTERLY_EARNINGS_GROWTH_YOY VARCHAR(50),
  QUARTERLY_REVENUE_GROWTH_YOY VARCHAR(50),
  ANALYST_TARGET_PRICE VARCHAR(50),
  TRAILING_PE VARCHAR(50),
  FORWARD_PE VARCHAR(50),
  PRICE_TO_SALES_RATIO_TTM VARCHAR(50),
  PRICE_TO_BOOK_RATIO VARCHAR(50),
  EV_TO_REVENUE VARCHAR(50),
  EV_TO_EBITDA VARCHAR(50),
  BETA VARCHAR(50),
  WEEK_52_HIGH VARCHAR(50),
  WEEK_52_LOW VARCHAR(50),
  DAY_50_MOVING_AVERAGE VARCHAR(50),
  DAY_200_MOVING_AVERAGE VARCHAR(50),
  SHARES_OUTSTANDING VARCHAR(50),
  DIVIDEND_DATE VARCHAR(50),
  EX_DIVIDEND_DATE VARCHAR(50),
  LATEST_QUARTER VARCHAR(50),
  PROCESSED_DATE VARCHAR(50),
  LOAD_DATE VARCHAR(50),
  source_file VARCHAR
);

-- Debug: Check what files are in the stage
LIST @COMPANY_OVERVIEW_STAGE;

-- Debug: Check files in date folders specifically
LIST @COMPANY_OVERVIEW_STAGE PATTERN='.*/[0-9]{4}/[0-9]{2}/[0-9]{2}/.*';

-- Load ALL CSV files - using simplified column mapping to avoid column count issues
COPY INTO FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
FROM @COMPANY_OVERVIEW_STAGE
FILE_FORMAT = (FORMAT_NAME = FIN_TRADE_EXTRACT.RAW.RAW_CSV_FORMAT)
PATTERN = '.*overview_.*\\.csv'
ON_ERROR = CONTINUE;

-- Debug: Check how many rows were loaded from each file
SELECT 
    source_file,
    COUNT(*) as rows_loaded 
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
GROUP BY source_file;

SELECT COUNT(*) as total_rows_loaded FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING;

-- Remove bad rows
DELETE FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING WHERE symbol IS NULL OR symbol = '';

-- Debug: Check for duplicate symbols across files
SELECT 
    symbol,
    COUNT(*) as occurrence_count,
    COUNT(DISTINCT source_file) as file_count,
    LISTAGG(DISTINCT source_file, ', ') as files
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
GROUP BY symbol
HAVING COUNT(*) > 1
ORDER BY occurrence_count DESC
LIMIT 10;

-- Create deduplicated staging data
DELETE FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
WHERE (symbol, source_file) NOT IN (
  SELECT symbol, MIN(source_file) 
  FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
  GROUP BY symbol
);

-- Debug: Check staging data after deduplication
SELECT COUNT(*) as rows_after_dedup FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING;

-- Simple merge 
MERGE INTO FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW tgt
USING (
  SELECT 
    SYMBOL_ID,
    SYMBOL,
    ASSET_TYPE,
    NAME,
    DESCRIPTION,
    CIK,
    EXCHANGE,
    CURRENCY,
    COUNTRY,
    SECTOR,
    INDUSTRY,
    ADDRESS,
    OFFICIAL_SITE,
    FISCAL_YEAR_END,
    TRY_TO_NUMBER(NULLIF(TRIM(MARKET_CAPITALIZATION), '')) AS MARKET_CAPITALIZATION,
    TRY_TO_NUMBER(NULLIF(TRIM(EBITDA), '')) AS EBITDA,
    TRY_TO_NUMBER(NULLIF(TRIM(PE_RATIO), '')) AS PE_RATIO,
    TRY_TO_NUMBER(NULLIF(TRIM(PEG_RATIO), '')) AS PEG_RATIO,
    TRY_TO_NUMBER(NULLIF(TRIM(BOOK_VALUE), '')) AS BOOK_VALUE,
    TRY_TO_NUMBER(NULLIF(TRIM(DIVIDEND_PER_SHARE), '')) AS DIVIDEND_PER_SHARE,
    TRY_TO_NUMBER(NULLIF(TRIM(DIVIDEND_YIELD), '')) AS DIVIDEND_YIELD,
    TRY_TO_NUMBER(NULLIF(TRIM(EPS), '')) AS EPS,
    TRY_TO_NUMBER(NULLIF(TRIM(REVENUE_PER_SHARE_TTM), '')) AS REVENUE_PER_SHARE_TTM,
    TRY_TO_NUMBER(NULLIF(TRIM(PROFIT_MARGIN), '')) AS PROFIT_MARGIN,
    TRY_TO_NUMBER(NULLIF(TRIM(OPERATING_MARGIN_TTM), '')) AS OPERATING_MARGIN_TTM,
    TRY_TO_NUMBER(NULLIF(TRIM(RETURN_ON_ASSETS_TTM), '')) AS RETURN_ON_ASSETS_TTM,
    TRY_TO_NUMBER(NULLIF(TRIM(RETURN_ON_EQUITY_TTM), '')) AS RETURN_ON_EQUITY_TTM,
    TRY_TO_NUMBER(NULLIF(TRIM(REVENUE_TTM), '')) AS REVENUE_TTM,
    TRY_TO_NUMBER(NULLIF(TRIM(GROSS_PROFIT_TTM), '')) AS GROSS_PROFIT_TTM,
    TRY_TO_NUMBER(NULLIF(TRIM(DILUTED_EPS_TTM), '')) AS DILUTED_EPS_TTM,
    TRY_TO_NUMBER(NULLIF(TRIM(QUARTERLY_EARNINGS_GROWTH_YOY), '')) AS QUARTERLY_EARNINGS_GROWTH_YOY,
    TRY_TO_NUMBER(NULLIF(TRIM(QUARTERLY_REVENUE_GROWTH_YOY), '')) AS QUARTERLY_REVENUE_GROWTH_YOY,
    TRY_TO_NUMBER(NULLIF(TRIM(ANALYST_TARGET_PRICE), '')) AS ANALYST_TARGET_PRICE,
    TRY_TO_NUMBER(NULLIF(TRIM(TRAILING_PE), '')) AS TRAILING_PE,
    TRY_TO_NUMBER(NULLIF(TRIM(FORWARD_PE), '')) AS FORWARD_PE,
    TRY_TO_NUMBER(NULLIF(TRIM(PRICE_TO_SALES_RATIO_TTM), '')) AS PRICE_TO_SALES_RATIO_TTM,
    TRY_TO_NUMBER(NULLIF(TRIM(PRICE_TO_BOOK_RATIO), '')) AS PRICE_TO_BOOK_RATIO,
    TRY_TO_NUMBER(NULLIF(TRIM(EV_TO_REVENUE), '')) AS EV_TO_REVENUE,
    TRY_TO_NUMBER(NULLIF(TRIM(EV_TO_EBITDA), '')) AS EV_TO_EBITDA,
    TRY_TO_NUMBER(NULLIF(TRIM(BETA), '')) AS BETA,
    TRY_TO_NUMBER(NULLIF(TRIM(WEEK_52_HIGH), '')) AS WEEK_52_HIGH,
    TRY_TO_NUMBER(NULLIF(TRIM(WEEK_52_LOW), '')) AS WEEK_52_LOW,
    TRY_TO_NUMBER(NULLIF(TRIM(DAY_50_MOVING_AVERAGE), '')) AS DAY_50_MOVING_AVERAGE,
    TRY_TO_NUMBER(NULLIF(TRIM(DAY_200_MOVING_AVERAGE), '')) AS DAY_200_MOVING_AVERAGE,
    TRY_TO_NUMBER(NULLIF(TRIM(SHARES_OUTSTANDING), '')) AS SHARES_OUTSTANDING,
    TRY_TO_DATE(NULLIF(TRIM(DIVIDEND_DATE), '')) AS DIVIDEND_DATE,
    TRY_TO_DATE(NULLIF(TRIM(EX_DIVIDEND_DATE), '')) AS EX_DIVIDEND_DATE,
    TRY_TO_DATE(NULLIF(TRIM(LATEST_QUARTER), '')) AS LATEST_QUARTER,
    TRY_TO_DATE(NULLIF(TRIM(PROCESSED_DATE), '')) AS PROCESSED_DATE,
    LOAD_DATE
  FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING
) src
ON UPPER(TRIM(tgt.SYMBOL)) = UPPER(TRIM(src.SYMBOL))
WHEN MATCHED THEN UPDATE SET
  tgt.SYMBOL_ID = src.SYMBOL_ID,
  tgt.ASSET_TYPE = src.ASSET_TYPE,
  tgt.NAME = src.NAME,
  tgt.DESCRIPTION = src.DESCRIPTION,
  tgt.CIK = src.CIK,
  tgt.EXCHANGE = src.EXCHANGE,
  tgt.CURRENCY = src.CURRENCY,
  tgt.COUNTRY = src.COUNTRY,
  tgt.SECTOR = src.SECTOR,
  tgt.INDUSTRY = src.INDUSTRY,
  tgt.ADDRESS = src.ADDRESS,
  tgt.OFFICIAL_SITE = src.OFFICIAL_SITE,
  tgt.FISCAL_YEAR_END = src.FISCAL_YEAR_END,
  tgt.MARKET_CAPITALIZATION = src.MARKET_CAPITALIZATION,
  tgt.EBITDA = src.EBITDA,
  tgt.PE_RATIO = src.PE_RATIO,
  tgt.PEG_RATIO = src.PEG_RATIO,
  tgt.BOOK_VALUE = src.BOOK_VALUE,
  tgt.DIVIDEND_PER_SHARE = src.DIVIDEND_PER_SHARE,
  tgt.DIVIDEND_YIELD = src.DIVIDEND_YIELD,
  tgt.EPS = src.EPS,
  tgt.REVENUE_PER_SHARE_TTM = src.REVENUE_PER_SHARE_TTM,
  tgt.PROFIT_MARGIN = src.PROFIT_MARGIN,
  tgt.OPERATING_MARGIN_TTM = src.OPERATING_MARGIN_TTM,
  tgt.RETURN_ON_ASSETS_TTM = src.RETURN_ON_ASSETS_TTM,
  tgt.RETURN_ON_EQUITY_TTM = src.RETURN_ON_EQUITY_TTM,
  tgt.REVENUE_TTM = src.REVENUE_TTM,
  tgt.GROSS_PROFIT_TTM = src.GROSS_PROFIT_TTM,
  tgt.DILUTED_EPS_TTM = src.DILUTED_EPS_TTM,
  tgt.QUARTERLY_EARNINGS_GROWTH_YOY = src.QUARTERLY_EARNINGS_GROWTH_YOY,
  tgt.QUARTERLY_REVENUE_GROWTH_YOY = src.QUARTERLY_REVENUE_GROWTH_YOY,
  tgt.ANALYST_TARGET_PRICE = src.ANALYST_TARGET_PRICE,
  tgt.TRAILING_PE = src.TRAILING_PE,
  tgt.FORWARD_PE = src.FORWARD_PE,
  tgt.PRICE_TO_SALES_RATIO_TTM = src.PRICE_TO_SALES_RATIO_TTM,
  tgt.PRICE_TO_BOOK_RATIO = src.PRICE_TO_BOOK_RATIO,
  tgt.EV_TO_REVENUE = src.EV_TO_REVENUE,
  tgt.EV_TO_EBITDA = src.EV_TO_EBITDA,
  tgt.BETA = src.BETA,
  tgt.WEEK_52_HIGH = src.WEEK_52_HIGH,
  tgt.WEEK_52_LOW = src.WEEK_52_LOW,
  tgt.DAY_50_MOVING_AVERAGE = src.DAY_50_MOVING_AVERAGE,
  tgt.DAY_200_MOVING_AVERAGE = src.DAY_200_MOVING_AVERAGE,
  tgt.SHARES_OUTSTANDING = src.SHARES_OUTSTANDING,
  tgt.DIVIDEND_DATE = src.DIVIDEND_DATE,
  tgt.EX_DIVIDEND_DATE = src.EX_DIVIDEND_DATE,
  tgt.LATEST_QUARTER = src.LATEST_QUARTER,
  tgt.PROCESSED_DATE = src.PROCESSED_DATE,
  tgt.LOAD_DATE = src.LOAD_DATE,
  tgt.UPDATED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN INSERT (
  SYMBOL_ID, SYMBOL, ASSET_TYPE, NAME, DESCRIPTION, CIK, EXCHANGE, CURRENCY, COUNTRY, SECTOR, INDUSTRY, ADDRESS, OFFICIAL_SITE,
  FISCAL_YEAR_END, MARKET_CAPITALIZATION, EBITDA, PE_RATIO, PEG_RATIO, BOOK_VALUE, DIVIDEND_PER_SHARE, DIVIDEND_YIELD, EPS,
  REVENUE_PER_SHARE_TTM, PROFIT_MARGIN, OPERATING_MARGIN_TTM, RETURN_ON_ASSETS_TTM, RETURN_ON_EQUITY_TTM, REVENUE_TTM,
  GROSS_PROFIT_TTM, DILUTED_EPS_TTM, QUARTERLY_EARNINGS_GROWTH_YOY, QUARTERLY_REVENUE_GROWTH_YOY, ANALYST_TARGET_PRICE,
  TRAILING_PE, FORWARD_PE, PRICE_TO_SALES_RATIO_TTM, PRICE_TO_BOOK_RATIO, EV_TO_REVENUE, EV_TO_EBITDA, BETA,
  WEEK_52_HIGH, WEEK_52_LOW, DAY_50_MOVING_AVERAGE, DAY_200_MOVING_AVERAGE, SHARES_OUTSTANDING, DIVIDEND_DATE,
  EX_DIVIDEND_DATE, LATEST_QUARTER, PROCESSED_DATE, LOAD_DATE
) VALUES (
  src.SYMBOL_ID, src.SYMBOL, src.ASSET_TYPE, src.NAME, src.DESCRIPTION, src.CIK, src.EXCHANGE, src.CURRENCY, src.COUNTRY, src.SECTOR, src.INDUSTRY, src.ADDRESS, src.OFFICIAL_SITE,
  src.FISCAL_YEAR_END, src.MARKET_CAPITALIZATION, src.EBITDA, src.PE_RATIO, src.PEG_RATIO, src.BOOK_VALUE, src.DIVIDEND_PER_SHARE, src.DIVIDEND_YIELD, src.EPS,
  src.REVENUE_PER_SHARE_TTM, src.PROFIT_MARGIN, src.OPERATING_MARGIN_TTM, src.RETURN_ON_ASSETS_TTM, src.RETURN_ON_EQUITY_TTM, src.REVENUE_TTM,
  src.GROSS_PROFIT_TTM, src.DILUTED_EPS_TTM, src.QUARTERLY_EARNINGS_GROWTH_YOY, src.QUARTERLY_REVENUE_GROWTH_YOY, src.ANALYST_TARGET_PRICE,
  src.TRAILING_PE, src.FORWARD_PE, src.PRICE_TO_SALES_RATIO_TTM, src.PRICE_TO_BOOK_RATIO, src.EV_TO_REVENUE, src.EV_TO_EBITDA, src.BETA,
  src.WEEK_52_HIGH, src.WEEK_52_LOW, src.DAY_50_MOVING_AVERAGE, src.DAY_200_MOVING_AVERAGE, src.SHARES_OUTSTANDING, src.DIVIDEND_DATE,
  src.EX_DIVIDEND_DATE, src.LATEST_QUARTER, src.PROCESSED_DATE, src.LOAD_DATE
);

-- Verify results
SELECT COUNT(*) AS total_overview_records FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW;

-- Sample records
SELECT SYMBOL, NAME, SECTOR, FISCAL_YEAR_END, LATEST_QUARTER, LOAD_DATE, UPDATED_AT
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW 
ORDER BY SYMBOL LIMIT 10;