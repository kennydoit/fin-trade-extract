-- ============================================================================
-- Load Balance Sheet Data from S3 to Snowflake
-- 
-- Purpose: Loads balance sheet fundamentals data from S3 staged files
-- Source: Alpha Vantage BALANCE_SHEET API endpoint
-- Destination: FIN_TRADE_EXTRACT.RAW.BALANCE_SHEET
-- Update Strategy: MERGE (upsert based on SYMBOL + FISCAL_DATE_ENDING + PERIOD_TYPE)
-- ============================================================================

USE DATABASE FIN_TRADE_EXTRACT;
USE SCHEMA RAW;
USE WAREHOUSE FIN_TRADE_WH;
USE ROLE ETL_ROLE;

-- Step 1: Create external stage pointing to S3 balance sheet folder
CREATE OR REPLACE STAGE FIN_TRADE_EXTRACT.RAW.BALANCE_SHEET_STAGE
  URL='s3://fin-trade-craft-landing/balance_sheet/'
  STORAGE_INTEGRATION = FIN_TRADE_S3_INTEGRATION
  FILE_FORMAT = (
    TYPE = 'CSV'
    COMPRESSION = 'AUTO'
    FIELD_DELIMITER = ','
    RECORD_DELIMITER = '\n'
    SKIP_HEADER = 1
    NULL_IF = ('NULL', 'null', '', 'None')
    EMPTY_FIELD_AS_NULL = TRUE
    FIELD_OPTIONALLY_ENCLOSED_BY = '"'
    TRIM_SPACE = TRUE
    ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
    ENCODING = 'UTF8'
  );

-- Step 2: List files in stage to verify content
LIST @BALANCE_SHEET_STAGE;

-- Step 3: Create the target table if it doesn't exist
CREATE TABLE IF NOT EXISTS FIN_TRADE_EXTRACT.RAW.BALANCE_SHEET (
    SYMBOL VARCHAR(20) NOT NULL,
    FISCAL_DATE_ENDING DATE NOT NULL,
    PERIOD_TYPE VARCHAR(20) NOT NULL,  -- 'annual' or 'quarterly'
    REPORTED_CURRENCY VARCHAR(10),
    
    -- Assets
    TOTAL_ASSETS NUMBER(38, 2),
    TOTAL_CURRENT_ASSETS NUMBER(38, 2),
    CASH_AND_CASH_EQUIVALENTS NUMBER(38, 2),
    CASH_AND_SHORT_TERM_INVESTMENTS NUMBER(38, 2),
    INVENTORY NUMBER(38, 2),
    CURRENT_NET_RECEIVABLES NUMBER(38, 2),
    TOTAL_NON_CURRENT_ASSETS NUMBER(38, 2),
    PROPERTY_PLANT_EQUIPMENT NUMBER(38, 2),
    ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE NUMBER(38, 2),
    INTANGIBLE_ASSETS NUMBER(38, 2),
    GOODWILL NUMBER(38, 2),
    INVESTMENTS NUMBER(38, 2),
    LONG_TERM_INVESTMENTS NUMBER(38, 2),
    SHORT_TERM_INVESTMENTS NUMBER(38, 2),
    OTHER_CURRENT_ASSETS NUMBER(38, 2),
    OTHER_NON_CURRENT_ASSETS NUMBER(38, 2),
    
    -- Liabilities
    TOTAL_LIABILITIES NUMBER(38, 2),
    TOTAL_CURRENT_LIABILITIES NUMBER(38, 2),
    CURRENT_ACCOUNTS_PAYABLE NUMBER(38, 2),
    DEFERRED_REVENUE NUMBER(38, 2),
    CURRENT_DEBT NUMBER(38, 2),
    SHORT_TERM_DEBT NUMBER(38, 2),
    TOTAL_NON_CURRENT_LIABILITIES NUMBER(38, 2),
    CAPITAL_LEASE_OBLIGATIONS NUMBER(38, 2),
    LONG_TERM_DEBT NUMBER(38, 2),
    CURRENT_LONG_TERM_DEBT NUMBER(38, 2),
    LONG_TERM_DEBT_NONCURRENT NUMBER(38, 2),
    OTHER_CURRENT_LIABILITIES NUMBER(38, 2),
    OTHER_NON_CURRENT_LIABILITIES NUMBER(38, 2),
    
    -- Equity
    TOTAL_SHAREHOLDER_EQUITY NUMBER(38, 2),
    TREASURY_STOCK NUMBER(38, 2),
    RETAINED_EARNINGS NUMBER(38, 2),
    COMMON_STOCK NUMBER(38, 2),
    COMMON_STOCK_SHARES_OUTSTANDING NUMBER(38, 0),
    
    -- Metadata
    SYMBOL_ID NUMBER(38, 0),
    LOAD_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    
    -- Constraints
    PRIMARY KEY (SYMBOL, FISCAL_DATE_ENDING, PERIOD_TYPE)
)
COMMENT = 'Balance sheet fundamentals data from Alpha Vantage API - watermark based ETL';

-- Step 4: Create transient staging table (all VARCHAR for initial load)
CREATE OR REPLACE TRANSIENT TABLE FIN_TRADE_EXTRACT.RAW.BALANCE_SHEET_STAGING (
    SYMBOL VARCHAR(20),
    FISCAL_DATE_ENDING VARCHAR(50),
    PERIOD_TYPE VARCHAR(20),
    REPORTED_CURRENCY VARCHAR(10),
    
    -- Assets (all VARCHAR to handle any data type issues)
    TOTAL_ASSETS VARCHAR(50),
    TOTAL_CURRENT_ASSETS VARCHAR(50),
    CASH_AND_CASH_EQUIVALENTS VARCHAR(50),
    CASH_AND_SHORT_TERM_INVESTMENTS VARCHAR(50),
    INVENTORY VARCHAR(50),
    CURRENT_NET_RECEIVABLES VARCHAR(50),
    TOTAL_NON_CURRENT_ASSETS VARCHAR(50),
    PROPERTY_PLANT_EQUIPMENT VARCHAR(50),
    ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE VARCHAR(50),
    INTANGIBLE_ASSETS VARCHAR(50),
    GOODWILL VARCHAR(50),
    INVESTMENTS VARCHAR(50),
    LONG_TERM_INVESTMENTS VARCHAR(50),
    SHORT_TERM_INVESTMENTS VARCHAR(50),
    OTHER_CURRENT_ASSETS VARCHAR(50),
    OTHER_NON_CURRENT_ASSETS VARCHAR(50),
    
    -- Liabilities (all VARCHAR)
    TOTAL_LIABILITIES VARCHAR(50),
    TOTAL_CURRENT_LIABILITIES VARCHAR(50),
    CURRENT_ACCOUNTS_PAYABLE VARCHAR(50),
    DEFERRED_REVENUE VARCHAR(50),
    CURRENT_DEBT VARCHAR(50),
    SHORT_TERM_DEBT VARCHAR(50),
    TOTAL_NON_CURRENT_LIABILITIES VARCHAR(50),
    CAPITAL_LEASE_OBLIGATIONS VARCHAR(50),
    LONG_TERM_DEBT VARCHAR(50),
    CURRENT_LONG_TERM_DEBT VARCHAR(50),
    LONG_TERM_DEBT_NONCURRENT VARCHAR(50),
    OTHER_CURRENT_LIABILITIES VARCHAR(50),
    OTHER_NON_CURRENT_LIABILITIES VARCHAR(50),
    
    -- Equity (all VARCHAR)
    TOTAL_SHAREHOLDER_EQUITY VARCHAR(50),
    TREASURY_STOCK VARCHAR(50),
    RETAINED_EARNINGS VARCHAR(50),
    COMMON_STOCK VARCHAR(50),
    COMMON_STOCK_SHARES_OUTSTANDING VARCHAR(50)
);

-- Step 5: Copy data from S3 into staging table
COPY INTO FIN_TRADE_EXTRACT.RAW.BALANCE_SHEET_STAGING (
    SYMBOL, FISCAL_DATE_ENDING, PERIOD_TYPE, REPORTED_CURRENCY,
    TOTAL_ASSETS, TOTAL_CURRENT_ASSETS, CASH_AND_CASH_EQUIVALENTS,
    CASH_AND_SHORT_TERM_INVESTMENTS, INVENTORY, CURRENT_NET_RECEIVABLES,
    TOTAL_NON_CURRENT_ASSETS, PROPERTY_PLANT_EQUIPMENT, ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE,
    INTANGIBLE_ASSETS, GOODWILL, INVESTMENTS, LONG_TERM_INVESTMENTS,
    SHORT_TERM_INVESTMENTS, OTHER_CURRENT_ASSETS, OTHER_NON_CURRENT_ASSETS,
    TOTAL_LIABILITIES, TOTAL_CURRENT_LIABILITIES, CURRENT_ACCOUNTS_PAYABLE,
    DEFERRED_REVENUE, CURRENT_DEBT, SHORT_TERM_DEBT, TOTAL_NON_CURRENT_LIABILITIES,
    CAPITAL_LEASE_OBLIGATIONS, LONG_TERM_DEBT, CURRENT_LONG_TERM_DEBT,
    LONG_TERM_DEBT_NONCURRENT, OTHER_CURRENT_LIABILITIES, OTHER_NON_CURRENT_LIABILITIES,
    TOTAL_SHAREHOLDER_EQUITY, TREASURY_STOCK, RETAINED_EARNINGS,
    COMMON_STOCK, COMMON_STOCK_SHARES_OUTSTANDING
)
FROM (
    SELECT 
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
        $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,
        $21, $22, $23, $24, $25, $26, $27, $28, $29, $30,
        $31, $32, $33, $34, $35, $36, $37, $38
    FROM @BALANCE_SHEET_STAGE
)
FILE_FORMAT = (
    TYPE = 'CSV'
    SKIP_HEADER = 1
    FIELD_DELIMITER = ','
    RECORD_DELIMITER = '\n'
    NULL_IF = ('NULL', 'null', '', 'None')
    EMPTY_FIELD_AS_NULL = TRUE
    FIELD_OPTIONALLY_ENCLOSED_BY = '"'
    TRIM_SPACE = TRUE
    ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
)
PURGE = FALSE
ON_ERROR = 'CONTINUE';

-- Step 6: Show row counts
SELECT 
    COUNT(*) as total_rows,
    COUNT(DISTINCT SYMBOL) as unique_symbols,
    COUNT(DISTINCT FISCAL_DATE_ENDING) as unique_dates
FROM BALANCE_SHEET_STAGING;

-- Step 7: Data Quality Checks
-- Check for missing required fields
SELECT 
    'Missing Required Fields' as check_name,
    COUNT(*) as issue_count
FROM BALANCE_SHEET_STAGING
WHERE SYMBOL IS NULL 
   OR FISCAL_DATE_ENDING IS NULL 
   OR PERIOD_TYPE IS NULL;

-- Check for invalid dates
SELECT 
    'Invalid Dates' as check_name,
    COUNT(*) as issue_count
FROM BALANCE_SHEET_STAGING
WHERE TRY_TO_DATE(FISCAL_DATE_ENDING) IS NULL 
  AND FISCAL_DATE_ENDING IS NOT NULL;

-- Check for invalid period types
SELECT 
    'Invalid Period Types' as check_name,
    COUNT(*) as issue_count
FROM BALANCE_SHEET_STAGING
WHERE PERIOD_TYPE NOT IN ('annual', 'quarterly')
  AND PERIOD_TYPE IS NOT NULL;

-- Check for potential duplicates
SELECT 
    'Duplicate Keys' as check_name,
    COUNT(*) as issue_count
FROM (
    SELECT SYMBOL, FISCAL_DATE_ENDING, PERIOD_TYPE, COUNT(*) as cnt
    FROM BALANCE_SHEET_STAGING
    GROUP BY SYMBOL, FISCAL_DATE_ENDING, PERIOD_TYPE
    HAVING COUNT(*) > 1
);

-- Check data distribution by period type
SELECT 
    PERIOD_TYPE,
    COUNT(*) as count,
    COUNT(DISTINCT SYMBOL) as unique_symbols
FROM BALANCE_SHEET_STAGING
GROUP BY PERIOD_TYPE
ORDER BY PERIOD_TYPE;

-- Step 8: Preview staging data
SELECT * FROM BALANCE_SHEET_STAGING LIMIT 10;

-- Step 9: MERGE staging data into target table
MERGE INTO FIN_TRADE_EXTRACT.RAW.BALANCE_SHEET AS target
USING (
    SELECT 
        s.SYMBOL,
        TRY_TO_DATE(s.FISCAL_DATE_ENDING) AS FISCAL_DATE_ENDING,
        s.PERIOD_TYPE,
        s.REPORTED_CURRENCY,
        
        -- Assets
        TRY_TO_NUMBER(s.TOTAL_ASSETS, 38, 2) AS TOTAL_ASSETS,
        TRY_TO_NUMBER(s.TOTAL_CURRENT_ASSETS, 38, 2) AS TOTAL_CURRENT_ASSETS,
        TRY_TO_NUMBER(s.CASH_AND_CASH_EQUIVALENTS, 38, 2) AS CASH_AND_CASH_EQUIVALENTS,
        TRY_TO_NUMBER(s.CASH_AND_SHORT_TERM_INVESTMENTS, 38, 2) AS CASH_AND_SHORT_TERM_INVESTMENTS,
        TRY_TO_NUMBER(s.INVENTORY, 38, 2) AS INVENTORY,
        TRY_TO_NUMBER(s.CURRENT_NET_RECEIVABLES, 38, 2) AS CURRENT_NET_RECEIVABLES,
        TRY_TO_NUMBER(s.TOTAL_NON_CURRENT_ASSETS, 38, 2) AS TOTAL_NON_CURRENT_ASSETS,
        TRY_TO_NUMBER(s.PROPERTY_PLANT_EQUIPMENT, 38, 2) AS PROPERTY_PLANT_EQUIPMENT,
        TRY_TO_NUMBER(s.ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE, 38, 2) AS ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE,
        TRY_TO_NUMBER(s.INTANGIBLE_ASSETS, 38, 2) AS INTANGIBLE_ASSETS,
        TRY_TO_NUMBER(s.GOODWILL, 38, 2) AS GOODWILL,
        TRY_TO_NUMBER(s.INVESTMENTS, 38, 2) AS INVESTMENTS,
        TRY_TO_NUMBER(s.LONG_TERM_INVESTMENTS, 38, 2) AS LONG_TERM_INVESTMENTS,
        TRY_TO_NUMBER(s.SHORT_TERM_INVESTMENTS, 38, 2) AS SHORT_TERM_INVESTMENTS,
        TRY_TO_NUMBER(s.OTHER_CURRENT_ASSETS, 38, 2) AS OTHER_CURRENT_ASSETS,
        TRY_TO_NUMBER(s.OTHER_NON_CURRENT_ASSETS, 38, 2) AS OTHER_NON_CURRENT_ASSETS,
        
        -- Liabilities
        TRY_TO_NUMBER(s.TOTAL_LIABILITIES, 38, 2) AS TOTAL_LIABILITIES,
        TRY_TO_NUMBER(s.TOTAL_CURRENT_LIABILITIES, 38, 2) AS TOTAL_CURRENT_LIABILITIES,
        TRY_TO_NUMBER(s.CURRENT_ACCOUNTS_PAYABLE, 38, 2) AS CURRENT_ACCOUNTS_PAYABLE,
        TRY_TO_NUMBER(s.DEFERRED_REVENUE, 38, 2) AS DEFERRED_REVENUE,
        TRY_TO_NUMBER(s.CURRENT_DEBT, 38, 2) AS CURRENT_DEBT,
        TRY_TO_NUMBER(s.SHORT_TERM_DEBT, 38, 2) AS SHORT_TERM_DEBT,
        TRY_TO_NUMBER(s.TOTAL_NON_CURRENT_LIABILITIES, 38, 2) AS TOTAL_NON_CURRENT_LIABILITIES,
        TRY_TO_NUMBER(s.CAPITAL_LEASE_OBLIGATIONS, 38, 2) AS CAPITAL_LEASE_OBLIGATIONS,
        TRY_TO_NUMBER(s.LONG_TERM_DEBT, 38, 2) AS LONG_TERM_DEBT,
        TRY_TO_NUMBER(s.CURRENT_LONG_TERM_DEBT, 38, 2) AS CURRENT_LONG_TERM_DEBT,
        TRY_TO_NUMBER(s.LONG_TERM_DEBT_NONCURRENT, 38, 2) AS LONG_TERM_DEBT_NONCURRENT,
        TRY_TO_NUMBER(s.OTHER_CURRENT_LIABILITIES, 38, 2) AS OTHER_CURRENT_LIABILITIES,
        TRY_TO_NUMBER(s.OTHER_NON_CURRENT_LIABILITIES, 38, 2) AS OTHER_NON_CURRENT_LIABILITIES,
        
        -- Equity
        TRY_TO_NUMBER(s.TOTAL_SHAREHOLDER_EQUITY, 38, 2) AS TOTAL_SHAREHOLDER_EQUITY,
        TRY_TO_NUMBER(s.TREASURY_STOCK, 38, 2) AS TREASURY_STOCK,
        TRY_TO_NUMBER(s.RETAINED_EARNINGS, 38, 2) AS RETAINED_EARNINGS,
        TRY_TO_NUMBER(s.COMMON_STOCK, 38, 2) AS COMMON_STOCK,
        TRY_TO_NUMBER(s.COMMON_STOCK_SHARES_OUTSTANDING, 38, 0) AS COMMON_STOCK_SHARES_OUTSTANDING,
        
        -- Metadata
        NULL AS SYMBOL_ID,  -- Will be populated later when SYMBOL table is available
        CURRENT_TIMESTAMP() AS LOAD_DATE
        
    FROM BALANCE_SHEET_STAGING s
    WHERE TRY_TO_DATE(s.FISCAL_DATE_ENDING) IS NOT NULL
      AND s.SYMBOL IS NOT NULL
      AND s.PERIOD_TYPE IN ('annual', 'quarterly')
) AS source
ON target.SYMBOL = source.SYMBOL 
   AND target.FISCAL_DATE_ENDING = source.FISCAL_DATE_ENDING
   AND target.PERIOD_TYPE = source.PERIOD_TYPE
WHEN MATCHED THEN
    UPDATE SET
        target.REPORTED_CURRENCY = source.REPORTED_CURRENCY,
        target.TOTAL_ASSETS = source.TOTAL_ASSETS,
        target.TOTAL_CURRENT_ASSETS = source.TOTAL_CURRENT_ASSETS,
        target.CASH_AND_CASH_EQUIVALENTS = source.CASH_AND_CASH_EQUIVALENTS,
        target.CASH_AND_SHORT_TERM_INVESTMENTS = source.CASH_AND_SHORT_TERM_INVESTMENTS,
        target.INVENTORY = source.INVENTORY,
        target.CURRENT_NET_RECEIVABLES = source.CURRENT_NET_RECEIVABLES,
        target.TOTAL_NON_CURRENT_ASSETS = source.TOTAL_NON_CURRENT_ASSETS,
        target.PROPERTY_PLANT_EQUIPMENT = source.PROPERTY_PLANT_EQUIPMENT,
        target.ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE = source.ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE,
        target.INTANGIBLE_ASSETS = source.INTANGIBLE_ASSETS,
        target.GOODWILL = source.GOODWILL,
        target.INVESTMENTS = source.INVESTMENTS,
        target.LONG_TERM_INVESTMENTS = source.LONG_TERM_INVESTMENTS,
        target.SHORT_TERM_INVESTMENTS = source.SHORT_TERM_INVESTMENTS,
        target.OTHER_CURRENT_ASSETS = source.OTHER_CURRENT_ASSETS,
        target.OTHER_NON_CURRENT_ASSETS = source.OTHER_NON_CURRENT_ASSETS,
        target.TOTAL_LIABILITIES = source.TOTAL_LIABILITIES,
        target.TOTAL_CURRENT_LIABILITIES = source.TOTAL_CURRENT_LIABILITIES,
        target.CURRENT_ACCOUNTS_PAYABLE = source.CURRENT_ACCOUNTS_PAYABLE,
        target.DEFERRED_REVENUE = source.DEFERRED_REVENUE,
        target.CURRENT_DEBT = source.CURRENT_DEBT,
        target.SHORT_TERM_DEBT = source.SHORT_TERM_DEBT,
        target.TOTAL_NON_CURRENT_LIABILITIES = source.TOTAL_NON_CURRENT_LIABILITIES,
        target.CAPITAL_LEASE_OBLIGATIONS = source.CAPITAL_LEASE_OBLIGATIONS,
        target.LONG_TERM_DEBT = source.LONG_TERM_DEBT,
        target.CURRENT_LONG_TERM_DEBT = source.CURRENT_LONG_TERM_DEBT,
        target.LONG_TERM_DEBT_NONCURRENT = source.LONG_TERM_DEBT_NONCURRENT,
        target.OTHER_CURRENT_LIABILITIES = source.OTHER_CURRENT_LIABILITIES,
        target.OTHER_NON_CURRENT_LIABILITIES = source.OTHER_NON_CURRENT_LIABILITIES,
        target.TOTAL_SHAREHOLDER_EQUITY = source.TOTAL_SHAREHOLDER_EQUITY,
        target.TREASURY_STOCK = source.TREASURY_STOCK,
        target.RETAINED_EARNINGS = source.RETAINED_EARNINGS,
        target.COMMON_STOCK = source.COMMON_STOCK,
        target.COMMON_STOCK_SHARES_OUTSTANDING = source.COMMON_STOCK_SHARES_OUTSTANDING,
        target.SYMBOL_ID = source.SYMBOL_ID,
        target.LOAD_DATE = source.LOAD_DATE
WHEN NOT MATCHED THEN
    INSERT (
        SYMBOL, FISCAL_DATE_ENDING, PERIOD_TYPE, REPORTED_CURRENCY,
        TOTAL_ASSETS, TOTAL_CURRENT_ASSETS, CASH_AND_CASH_EQUIVALENTS,
        CASH_AND_SHORT_TERM_INVESTMENTS, INVENTORY, CURRENT_NET_RECEIVABLES,
        TOTAL_NON_CURRENT_ASSETS, PROPERTY_PLANT_EQUIPMENT, ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE,
        INTANGIBLE_ASSETS, GOODWILL, INVESTMENTS, LONG_TERM_INVESTMENTS,
        SHORT_TERM_INVESTMENTS, OTHER_CURRENT_ASSETS, OTHER_NON_CURRENT_ASSETS,
        TOTAL_LIABILITIES, TOTAL_CURRENT_LIABILITIES, CURRENT_ACCOUNTS_PAYABLE,
        DEFERRED_REVENUE, CURRENT_DEBT, SHORT_TERM_DEBT, TOTAL_NON_CURRENT_LIABILITIES,
        CAPITAL_LEASE_OBLIGATIONS, LONG_TERM_DEBT, CURRENT_LONG_TERM_DEBT,
        LONG_TERM_DEBT_NONCURRENT, OTHER_CURRENT_LIABILITIES, OTHER_NON_CURRENT_LIABILITIES,
        TOTAL_SHAREHOLDER_EQUITY, TREASURY_STOCK, RETAINED_EARNINGS,
        COMMON_STOCK, COMMON_STOCK_SHARES_OUTSTANDING,
        SYMBOL_ID, LOAD_DATE
    )
    VALUES (
        source.SYMBOL, source.FISCAL_DATE_ENDING, source.PERIOD_TYPE, source.REPORTED_CURRENCY,
        source.TOTAL_ASSETS, source.TOTAL_CURRENT_ASSETS, source.CASH_AND_CASH_EQUIVALENTS,
        source.CASH_AND_SHORT_TERM_INVESTMENTS, source.INVENTORY, source.CURRENT_NET_RECEIVABLES,
        source.TOTAL_NON_CURRENT_ASSETS, source.PROPERTY_PLANT_EQUIPMENT, source.ACCUMULATED_DEPRECIATION_AMORTIZATION_PPE,
        source.INTANGIBLE_ASSETS, source.GOODWILL, source.INVESTMENTS, source.LONG_TERM_INVESTMENTS,
        source.SHORT_TERM_INVESTMENTS, source.OTHER_CURRENT_ASSETS, source.OTHER_NON_CURRENT_ASSETS,
        source.TOTAL_LIABILITIES, source.TOTAL_CURRENT_LIABILITIES, source.CURRENT_ACCOUNTS_PAYABLE,
        source.DEFERRED_REVENUE, source.CURRENT_DEBT, source.SHORT_TERM_DEBT, source.TOTAL_NON_CURRENT_LIABILITIES,
        source.CAPITAL_LEASE_OBLIGATIONS, source.LONG_TERM_DEBT, source.CURRENT_LONG_TERM_DEBT,
        source.LONG_TERM_DEBT_NONCURRENT, source.OTHER_CURRENT_LIABILITIES, source.OTHER_NON_CURRENT_LIABILITIES,
        source.TOTAL_SHAREHOLDER_EQUITY, source.TREASURY_STOCK, source.RETAINED_EARNINGS,
        source.COMMON_STOCK, source.COMMON_STOCK_SHARES_OUTSTANDING,
        source.SYMBOL_ID, source.LOAD_DATE
    );

-- Step 10: Show summary statistics
SELECT 
    'Total Balance Sheet Records' as metric,
    COUNT(*) as value
FROM BALANCE_SHEET
UNION ALL
SELECT 
    'Unique Symbols',
    COUNT(DISTINCT SYMBOL)
FROM BALANCE_SHEET
UNION ALL
SELECT 
    'Annual Reports',
    COUNT(*)
FROM BALANCE_SHEET
WHERE PERIOD_TYPE = 'annual'
UNION ALL
SELECT 
    'Quarterly Reports',
    COUNT(*)
FROM BALANCE_SHEET
WHERE PERIOD_TYPE = 'quarterly';

-- Step 11: Show most recent data per symbol
SELECT 
    SYMBOL,
    PERIOD_TYPE,
    MAX(FISCAL_DATE_ENDING) as latest_fiscal_date,
    COUNT(*) as total_records
FROM BALANCE_SHEET
GROUP BY SYMBOL, PERIOD_TYPE
ORDER BY latest_fiscal_date DESC
LIMIT 20;

-- Step 12: Show symbols with most complete data
SELECT 
    SYMBOL,
    COUNT(DISTINCT FISCAL_DATE_ENDING) as unique_dates,
    MIN(FISCAL_DATE_ENDING) as earliest_date,
    MAX(FISCAL_DATE_ENDING) as latest_date,
    SUM(CASE WHEN PERIOD_TYPE = 'annual' THEN 1 ELSE 0 END) as annual_count,
    SUM(CASE WHEN PERIOD_TYPE = 'quarterly' THEN 1 ELSE 0 END) as quarterly_count
FROM BALANCE_SHEET
GROUP BY SYMBOL
ORDER BY unique_dates DESC
LIMIT 20;

-- Step 13: Cleanup staging table
DROP TABLE IF EXISTS BALANCE_SHEET_STAGING;

SELECT '✅ Balance Sheet data load completed successfully!' as status;
