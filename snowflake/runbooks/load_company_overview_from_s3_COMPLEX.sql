-- Load/merge Alpha Vantage COMPANY_OVERVIEW from S3 into RAW.COMPANY_OVERVIEW
-- Uses proper column names based on Alpha Vantage API structure

USE DATABASE FIN_TRADE_EXTRACT;
USE SCHEMA RAW;
USE WAREHOUSE FIN_TRADE_WH;
USE ROLE ACCOUNTADMIN;

-- 1) Create stage if needed
CREATE STAGE IF NOT EXISTS FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGE
  URL='s3://fin-trade-craft-landing/company_overview/'
  STORAGE_INTEGRATION = FIN_TRADE_S3_INTEGRATION;

-- 2) Create main table if needed (keep existing structure)
CREATE TABLE IF NOT EXISTS FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW (
  SYMBOL_ID NUMBER(38,0),
  SYMBOL VARCHAR(20),
  ASSET_TYPE VARCHAR(50),
  NAME VARCHAR(500),
  DESCRIPTION TEXT,
  CIK VARCHAR(20),
  EXCHANGE VARCHAR(50),
  CURRENCY VARCHAR(10),
  COUNTRY VARCHAR(100),
  SECTOR VARCHAR(100),
  INDUSTRY VARCHAR(200),
  ADDRESS TEXT,
  OFFICIAL_SITE VARCHAR(500),
  FISCAL_YEAR_END VARCHAR(50),
  MARKET_CAPITALIZATION NUMBER,
  EBITDA NUMBER,
  PE_RATIO NUMBER,
  PEG_RATIO NUMBER,
  BOOK_VALUE NUMBER,
  DIVIDEND_PER_SHARE NUMBER,
  DIVIDEND_YIELD NUMBER,
  EPS NUMBER,
  REVENUE_PER_SHARE_TTM NUMBER,
  PROFIT_MARGIN NUMBER,
  OPERATING_MARGIN_TTM NUMBER,
  RETURN_ON_ASSETS_TTM NUMBER,
  RETURN_ON_EQUITY_TTM NUMBER,
  REVENUE_TTM NUMBER,
  GROSS_PROFIT_TTM NUMBER,
  DILUTED_EPS_TTM NUMBER,
  QUARTERLY_EARNINGS_GROWTH_YOY NUMBER,
  QUARTERLY_REVENUE_GROWTH_YOY NUMBER,
  ANALYST_TARGET_PRICE NUMBER,
  TRAILING_PE NUMBER,
  FORWARD_PE NUMBER,
  PRICE_TO_SALES_RATIO_TTM NUMBER,
  PRICE_TO_BOOK_RATIO NUMBER,
  EV_TO_REVENUE NUMBER,
  EV_TO_EBITDA NUMBER,
  BETA NUMBER,
  WEEK_52_HIGH NUMBER,
  WEEK_52_LOW NUMBER,
  DAY_50_MOVING_AVERAGE NUMBER,
  DAY_200_MOVING_AVERAGE NUMBER,
  SHARES_OUTSTANDING NUMBER,
  DIVIDEND_DATE DATE,
  EX_DIVIDEND_DATE DATE,
  LATEST_QUARTER DATE,
  PROCESSED_DATE DATE,
  LOAD_DATE VARCHAR(50),
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- 3) Create staging table with proper Alpha Vantage field names
CREATE OR REPLACE TRANSIENT TABLE FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING (
  -- Core identification
  SYMBOL VARCHAR(20),
  SYMBOL_ID VARCHAR(50),
  
  -- Company info
  NAME VARCHAR(500),
  DESCRIPTION TEXT,
  CIK VARCHAR(20),
  EXCHANGE VARCHAR(50),
  CURRENCY VARCHAR(10),
  COUNTRY VARCHAR(100),
  SECTOR VARCHAR(100),
  INDUSTRY VARCHAR(200),
  ADDRESS TEXT,
  
  -- Fiscal info (these are the key fields you mentioned)
  FISCALYEAREND VARCHAR(50),
  LATESTQUARTER VARCHAR(50),
  
  -- Financial metrics
  MARKETCAPITALIZATION VARCHAR(50),
  EBITDA VARCHAR(50),
  PERATIO VARCHAR(50),
  PEGRATIO VARCHAR(50),
  BOOKVALUE VARCHAR(50),
  DIVIDENDPERSHARE VARCHAR(50),
  DIVIDENDYIELD VARCHAR(50),
  EPS VARCHAR(50),
  REVENUPERSHARETTM VARCHAR(50),
  PROFITMARGIN VARCHAR(50),
  OPERATINGMARGINTTM VARCHAR(50),
  RETURNONASSETSTTM VARCHAR(50),
  RETURNONEQUITYTTM VARCHAR(50),
  REVENUETTM VARCHAR(50),
  GROSSPROFITTTM VARCHAR(50),
  DILUTEDEPSTTM VARCHAR(50),
  QUARTERLYEARNINGSGROWTHYOY VARCHAR(50),
  QUARTERLYREVENUEGROWTHYOY VARCHAR(50),
  ANALYSTTARGETPRICE VARCHAR(50),
  TRAILINGPE VARCHAR(50),
  FORWARDPE VARCHAR(50),
  PRICETOSALESRATIOTTM VARCHAR(50),
  PRICETOBOOKRATIO VARCHAR(50),
  EVTOREVENUE VARCHAR(50),
  EVTOEBITDA VARCHAR(50),
  BETA VARCHAR(50),
  
  -- Price data
  "52WEEKHIGH" VARCHAR(50),
  "52WEEKLOW" VARCHAR(50),
  "50DAYMOVINGAVERAGE" VARCHAR(50),
  "200DAYMOVINGAVERAGE" VARCHAR(50),
  SHARESOUTSTANDING VARCHAR(50),
  
  -- Dates
  DIVIDENDDATE VARCHAR(50),
  EXDIVIDENDDATE VARCHAR(50),
  
  -- Processing metadata
  PROCESSED_DATE VARCHAR(50),
  LOAD_DATE VARCHAR(50),
  
  -- File tracking
  source_file VARCHAR(500)
);

-- Debug: Check what files are in the stage
SELECT 'Files in stage:' as MESSAGE;
LIST @COMPANY_OVERVIEW_STAGE;

-- Load CSV files with proper column names
COPY INTO FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
FROM @COMPANY_OVERVIEW_STAGE
FILE_FORMAT = (FORMAT_NAME = FIN_TRADE_EXTRACT.RAW.RAW_CSV_FORMAT)
PATTERN = 'overview_.*\\.csv'
ON_ERROR = CONTINUE;

-- Debug: Check how many rows were loaded
SELECT 
    'Load summary:' as MESSAGE,
    COUNT(*) as TOTAL_ROWS_LOADED,
    COUNT(DISTINCT source_file) as FILES_PROCESSED
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING;

-- Debug: Show sample data with proper column names
SELECT 
    'Sample loaded data:' as MESSAGE,
    SYMBOL,
    NAME,
    EXCHANGE,
    FISCALYEAREND,
    LATESTQUARTER,
    MARKETCAPITALIZATION,
    source_file
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
LIMIT 5;

-- Remove invalid rows (using proper SYMBOL column)
DELETE FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
WHERE SYMBOL IS NULL OR SYMBOL = '' OR SYMBOL = 'Symbol';

-- Debug: Check for duplicates using proper SYMBOL column
SELECT 
    'Duplicate analysis:' as MESSAGE,
    SYMBOL,
    COUNT(*) as occurrence_count,
    COUNT(DISTINCT source_file) as file_count,
    LISTAGG(DISTINCT source_file, ', ') as files
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
GROUP BY SYMBOL
HAVING COUNT(*) > 1
ORDER BY occurrence_count DESC
LIMIT 10;

-- Deduplicate by SYMBOL (keep the most recent file)  
DELETE FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
WHERE (SYMBOL, source_file) NOT IN (
  SELECT SYMBOL, MAX(source_file) 
  FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING 
  GROUP BY SYMBOL
);

-- Debug: Final staging count
SELECT 
    'After deduplication:' as MESSAGE,
    COUNT(*) as UNIQUE_SYMBOLS,
    COUNT(DISTINCT SYMBOL) as DISTINCT_SYMBOLS
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING;

-- Insert/update main table with proper column mapping
MERGE INTO FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW AS target
USING (
  SELECT 
    TRY_TO_NUMBER(SYMBOL_ID) as SYMBOL_ID,
    SYMBOL,
    'Equity' as ASSET_TYPE, -- Default for company overviews
    NAME,
    DESCRIPTION,
    CIK,
    EXCHANGE,
    CURRENCY,
    COUNTRY,
    SECTOR,
    INDUSTRY,
    ADDRESS,
    NULL as OFFICIAL_SITE, -- Not in staging
    FISCALYEAREND as FISCAL_YEAR_END,
    TRY_TO_NUMBER(MARKETCAPITALIZATION) as MARKET_CAPITALIZATION,
    TRY_TO_NUMBER(EBITDA) as EBITDA,
    TRY_TO_NUMBER(PERATIO) as PE_RATIO,
    TRY_TO_NUMBER(PEGRATIO) as PEG_RATIO,
    TRY_TO_NUMBER(BOOKVALUE) as BOOK_VALUE,
    TRY_TO_NUMBER(DIVIDENDPERSHARE) as DIVIDEND_PER_SHARE,
    TRY_TO_NUMBER(DIVIDENDYIELD) as DIVIDEND_YIELD,
    TRY_TO_NUMBER(EPS) as EPS,
    TRY_TO_NUMBER(REVENUPERSHARETTM) as REVENUE_PER_SHARE_TTM,
    TRY_TO_NUMBER(PROFITMARGIN) as PROFIT_MARGIN,
    TRY_TO_NUMBER(OPERATINGMARGINTTM) as OPERATING_MARGIN_TTM,
    TRY_TO_NUMBER(RETURNONASSETSTTM) as RETURN_ON_ASSETS_TTM,
    TRY_TO_NUMBER(RETURNONEQUITYTTM) as RETURN_ON_EQUITY_TTM,
    TRY_TO_NUMBER(REVENUETTM) as REVENUE_TTM,
    TRY_TO_NUMBER(GROSSPROFITTTM) as GROSS_PROFIT_TTM,
    TRY_TO_NUMBER(DILUTEDEPSTTM) as DILUTED_EPS_TTM,
    TRY_TO_NUMBER(QUARTERLYEARNINGSGROWTHYOY) as QUARTERLY_EARNINGS_GROWTH_YOY,
    TRY_TO_NUMBER(QUARTERLYREVENUEGROWTHYOY) as QUARTERLY_REVENUE_GROWTH_YOY,
    TRY_TO_NUMBER(ANALYSTTARGETPRICE) as ANALYST_TARGET_PRICE,
    TRY_TO_NUMBER(TRAILINGPE) as TRAILING_PE,
    TRY_TO_NUMBER(FORWARDPE) as FORWARD_PE,
    TRY_TO_NUMBER(PRICETOSALESRATIOTTM) as PRICE_TO_SALES_RATIO_TTM,
    TRY_TO_NUMBER(PRICETOBOOKRATIO) as PRICE_TO_BOOK_RATIO,
    TRY_TO_NUMBER(EVTOREVENUE) as EV_TO_REVENUE,
    TRY_TO_NUMBER(EVTOEBITDA) as EV_TO_EBITDA,
    TRY_TO_NUMBER(BETA) as BETA,
    TRY_TO_NUMBER("52WEEKHIGH") as WEEK_52_HIGH,
    TRY_TO_NUMBER("52WEEKLOW") as WEEK_52_LOW,
    TRY_TO_NUMBER("50DAYMOVINGAVERAGE") as DAY_50_MOVING_AVERAGE,
    TRY_TO_NUMBER("200DAYMOVINGAVERAGE") as DAY_200_MOVING_AVERAGE,
    TRY_TO_NUMBER(SHARESOUTSTANDING) as SHARES_OUTSTANDING,
    TRY_TO_DATE(DIVIDENDDATE, 'YYYY-MM-DD') as DIVIDEND_DATE,
    TRY_TO_DATE(EXDIVIDENDDATE, 'YYYY-MM-DD') as EX_DIVIDEND_DATE,
    TRY_TO_DATE(LATESTQUARTER, 'YYYY-MM-DD') as LATEST_QUARTER,
    TRY_TO_DATE(PROCESSED_DATE, 'YYYY-MM-DD') as PROCESSED_DATE,
    LOAD_DATE,
    CURRENT_TIMESTAMP() as UPDATED_AT
  FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING
) AS source
ON target.SYMBOL = source.SYMBOL
WHEN MATCHED THEN UPDATE SET
  target.NAME = source.NAME,
  target.DESCRIPTION = source.DESCRIPTION,
  target.CIK = source.CIK,
  target.EXCHANGE = source.EXCHANGE,
  target.CURRENCY = source.CURRENCY,
  target.COUNTRY = source.COUNTRY,
  target.SECTOR = source.SECTOR,
  target.INDUSTRY = source.INDUSTRY,
  target.ADDRESS = source.ADDRESS,
  target.FISCAL_YEAR_END = source.FISCAL_YEAR_END,
  target.MARKET_CAPITALIZATION = source.MARKET_CAPITALIZATION,
  target.EBITDA = source.EBITDA,
  target.PE_RATIO = source.PE_RATIO,
  target.PEG_RATIO = source.PEG_RATIO,
  target.BOOK_VALUE = source.BOOK_VALUE,
  target.DIVIDEND_PER_SHARE = source.DIVIDEND_PER_SHARE,
  target.DIVIDEND_YIELD = source.DIVIDEND_YIELD,
  target.EPS = source.EPS,
  target.REVENUE_PER_SHARE_TTM = source.REVENUE_PER_SHARE_TTM,
  target.PROFIT_MARGIN = source.PROFIT_MARGIN,
  target.OPERATING_MARGIN_TTM = source.OPERATING_MARGIN_TTM,
  target.RETURN_ON_ASSETS_TTM = source.RETURN_ON_ASSETS_TTM,
  target.RETURN_ON_EQUITY_TTM = source.RETURN_ON_EQUITY_TTM,
  target.REVENUE_TTM = source.REVENUE_TTM,
  target.GROSS_PROFIT_TTM = source.GROSS_PROFIT_TTM,
  target.DILUTED_EPS_TTM = source.DILUTED_EPS_TTM,
  target.QUARTERLY_EARNINGS_GROWTH_YOY = source.QUARTERLY_EARNINGS_GROWTH_YOY,
  target.QUARTERLY_REVENUE_GROWTH_YOY = source.QUARTERLY_REVENUE_GROWTH_YOY,
  target.ANALYST_TARGET_PRICE = source.ANALYST_TARGET_PRICE,
  target.TRAILING_PE = source.TRAILING_PE,
  target.FORWARD_PE = source.FORWARD_PE,
  target.PRICE_TO_SALES_RATIO_TTM = source.PRICE_TO_SALES_RATIO_TTM,
  target.PRICE_TO_BOOK_RATIO = source.PRICE_TO_BOOK_RATIO,
  target.EV_TO_REVENUE = source.EV_TO_REVENUE,
  target.EV_TO_EBITDA = source.EV_TO_EBITDA,
  target.BETA = source.BETA,
  target.WEEK_52_HIGH = source.WEEK_52_HIGH,
  target.WEEK_52_LOW = source.WEEK_52_LOW,
  target.DAY_50_MOVING_AVERAGE = source.DAY_50_MOVING_AVERAGE,
  target.DAY_200_MOVING_AVERAGE = source.DAY_200_MOVING_AVERAGE,
  target.SHARES_OUTSTANDING = source.SHARES_OUTSTANDING,
  target.DIVIDEND_DATE = source.DIVIDEND_DATE,
  target.EX_DIVIDEND_DATE = source.EX_DIVIDEND_DATE,
  target.LATEST_QUARTER = source.LATEST_QUARTER,
  target.PROCESSED_DATE = source.PROCESSED_DATE,
  target.LOAD_DATE = source.LOAD_DATE,
  target.UPDATED_AT = source.UPDATED_AT
WHEN NOT MATCHED THEN INSERT (
  SYMBOL_ID, SYMBOL, ASSET_TYPE, NAME, DESCRIPTION, CIK, EXCHANGE, CURRENCY, COUNTRY,
  SECTOR, INDUSTRY, ADDRESS, OFFICIAL_SITE, FISCAL_YEAR_END, MARKET_CAPITALIZATION,
  EBITDA, PE_RATIO, PEG_RATIO, BOOK_VALUE, DIVIDEND_PER_SHARE, DIVIDEND_YIELD, EPS,
  REVENUE_PER_SHARE_TTM, PROFIT_MARGIN, OPERATING_MARGIN_TTM, RETURN_ON_ASSETS_TTM,
  RETURN_ON_EQUITY_TTM, REVENUE_TTM, GROSS_PROFIT_TTM, DILUTED_EPS_TTM,
  QUARTERLY_EARNINGS_GROWTH_YOY, QUARTERLY_REVENUE_GROWTH_YOY, ANALYST_TARGET_PRICE,
  TRAILING_PE, FORWARD_PE, PRICE_TO_SALES_RATIO_TTM, PRICE_TO_BOOK_RATIO,
  EV_TO_REVENUE, EV_TO_EBITDA, BETA, WEEK_52_HIGH, WEEK_52_LOW,
  DAY_50_MOVING_AVERAGE, DAY_200_MOVING_AVERAGE, SHARES_OUTSTANDING,
  DIVIDEND_DATE, EX_DIVIDEND_DATE, LATEST_QUARTER, PROCESSED_DATE, LOAD_DATE, UPDATED_AT
) VALUES (
  source.SYMBOL_ID, source.SYMBOL, source.ASSET_TYPE, source.NAME, source.DESCRIPTION,
  source.CIK, source.EXCHANGE, source.CURRENCY, source.COUNTRY, source.SECTOR,
  source.INDUSTRY, source.ADDRESS, source.OFFICIAL_SITE, source.FISCAL_YEAR_END,
  source.MARKET_CAPITALIZATION, source.EBITDA, source.PE_RATIO, source.PEG_RATIO,
  source.BOOK_VALUE, source.DIVIDEND_PER_SHARE, source.DIVIDEND_YIELD, source.EPS,
  source.REVENUE_PER_SHARE_TTM, source.PROFIT_MARGIN, source.OPERATING_MARGIN_TTM,
  source.RETURN_ON_ASSETS_TTM, source.RETURN_ON_EQUITY_TTM, source.REVENUE_TTM,
  source.GROSS_PROFIT_TTM, source.DILUTED_EPS_TTM, source.QUARTERLY_EARNINGS_GROWTH_YOY,
  source.QUARTERLY_REVENUE_GROWTH_YOY, source.ANALYST_TARGET_PRICE, source.TRAILING_PE,
  source.FORWARD_PE, source.PRICE_TO_SALES_RATIO_TTM, source.PRICE_TO_BOOK_RATIO,
  source.EV_TO_REVENUE, source.EV_TO_EBITDA, source.BETA, source.WEEK_52_HIGH,
  source.WEEK_52_LOW, source.DAY_50_MOVING_AVERAGE, source.DAY_200_MOVING_AVERAGE,
  source.SHARES_OUTSTANDING, source.DIVIDEND_DATE, source.EX_DIVIDEND_DATE,
  source.LATEST_QUARTER, source.PROCESSED_DATE, source.LOAD_DATE, source.UPDATED_AT
);

-- Final summary
SELECT 'COMPANY OVERVIEW LOADING COMPLETED ✅' as MESSAGE;

SELECT 
    'Records processed:' as METRIC,
    COUNT(*) as VALUE
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING;

SELECT 
    'Records in main table:' as METRIC,
    COUNT(*) as VALUE
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW;

-- Show loaded symbols with key fiscal data
SELECT 
    'Loaded symbols with fiscal data:' as MESSAGE,
    SYMBOL,
    FISCAL_YEAR_END,
    LATEST_QUARTER,
    MARKET_CAPITALIZATION,
    UPDATED_AT
FROM FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW
ORDER BY SYMBOL;

-- Keep staging table for debugging and development
-- DROP TABLE FIN_TRADE_EXTRACT.RAW.COMPANY_OVERVIEW_STAGING;