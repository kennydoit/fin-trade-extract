USE DATABASE FIN_TRADE_EXTRACT;
USE SCHEMA RAW;
USE WAREHOUSE FIN_TRADE_WH;
USE ROLE ETL_ROLE;

CREATE OR REPLACE STAGE FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT_STAGE
    URL='s3://fin-trade-craft-landing/earnings_call_transcript/'
    STORAGE_INTEGRATION = FIN_TRADE_S3_INTEGRATION
    FILE_FORMAT = (
        TYPE = 'JSON'
        COMPRESSION = 'AUTO'
    );

LIST @FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT_STAGE;


DROP TABLE IF EXISTS FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT_UNSPLIT;
CREATE TRANSIENT TABLE FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT_UNSPLIT (
    TRANSCRIPT_DATA VARIANT
);

COPY INTO FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT_UNSPLIT
FROM (
    SELECT $1 FROM @FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT_STAGE
)
FILE_FORMAT = (TYPE = 'JSON');

SELECT 
    'Total Earnings Call Transcripts' as metric,
    CAST(COUNT(*) AS VARCHAR) as value
FROM FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT_UNSPLIT;

-- Create the final split-out table
CREATE OR REPLACE TABLE FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT AS
SELECT
    ABS(HASH(tdata:symbol::STRING)) % 1000000000 AS symbol_id,
    tdata:quarter::STRING AS quarter,
    tdata:symbol::STRING AS symbol,
    MAX(transcript_entry:sentiment::FLOAT) AS sentiment,
    ARRAY_TO_STRING(ARRAY_AGG(transcript_entry:content::STRING), ' ') AS transcript_text
FROM (
    SELECT
        TRANSCRIPT_DATA AS tdata,
        FLATTEN(INPUT => TRANSCRIPT_DATA:transcript) AS transcript_entry
    FROM FIN_TRADE_EXTRACT.RAW.EARNINGS_CALL_TRANSCRIPT_UNSPLIT
)
GROUP BY tdata:quarter, tdata:symbol;


