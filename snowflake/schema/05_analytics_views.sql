-- ============================================================================
-- Analytics Views for Financial Data Analysis
-- Business Intelligence layer for fin-trade-extract pipeline
-- ============================================================================

USE DATABASE FIN_TRADE_EXTRACT;
USE SCHEMA ANALYTICS;
USE WAREHOUSE FIN_TRADE_WH;

-- ============================================================================
-- FINANCIAL SUMMARY VIEW
-- ============================================================================

CREATE OR REPLACE VIEW VW_FINANCIAL_SUMMARY AS
SELECT 
    o.SYMBOL,
    o.NAME AS COMPANY_NAME,
    o.SECTOR,
    o.INDUSTRY,
    o.EXCHANGE,
    o.MARKET_CAPITALIZATION,
    o.PE_RATIO,
    o.EPS,
    o.REVENUE_TTM,
    o.PROFIT_MARGIN,
    o.BOOK_VALUE,
    o.DIVIDEND_YIELD,
    o.BETA,
    o.WEEK_52_HIGH,
    o.WEEK_52_LOW,
    
    -- Latest financial metrics from income statement
    i.TOTAL_REVENUE AS LATEST_REVENUE,
    i.NET_INCOME AS LATEST_NET_INCOME,
    i.GROSS_PROFIT AS LATEST_GROSS_PROFIT,
    
    -- Latest balance sheet metrics
    b.TOTAL_ASSETS AS LATEST_TOTAL_ASSETS,
    b.TOTAL_LIABILITIES AS LATEST_TOTAL_LIABILITIES,
    b.TOTAL_SHAREHOLDER_EQUITY AS LATEST_SHAREHOLDER_EQUITY,
    
    -- Ratios and calculations
    CASE 
        WHEN b.TOTAL_ASSETS > 0 THEN b.TOTAL_LIABILITIES / b.TOTAL_ASSETS 
        ELSE NULL 
    END AS DEBT_TO_ASSETS_RATIO,
    
    CASE 
        WHEN b.TOTAL_SHAREHOLDER_EQUITY > 0 THEN i.NET_INCOME / b.TOTAL_SHAREHOLDER_EQUITY 
        ELSE NULL 
    END AS ROE_CALCULATED,
    
    o.CREATED_AT AS LAST_UPDATED
    
FROM FIN_TRADE_EXTRACT.RAW.OVERVIEW o
LEFT JOIN (
    SELECT 
        SYMBOL_ID,
        TOTAL_REVENUE,
        NET_INCOME,
        GROSS_PROFIT,
        ROW_NUMBER() OVER (PARTITION BY SYMBOL_ID ORDER BY FISCAL_DATE_ENDING DESC) as rn
    FROM FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT
    WHERE REPORT_TYPE = 'annual'
) i ON o.SYMBOL_ID = i.SYMBOL_ID AND i.rn = 1

LEFT JOIN (
    SELECT 
        SYMBOL_ID,
        TOTAL_ASSETS,
        TOTAL_LIABILITIES,
        TOTAL_SHAREHOLDER_EQUITY,
        ROW_NUMBER() OVER (PARTITION BY SYMBOL_ID ORDER BY FISCAL_DATE_ENDING DESC) as rn
    FROM FIN_TRADE_EXTRACT.RAW.BALANCE_SHEET
    WHERE REPORT_TYPE = 'annual'
) b ON o.SYMBOL_ID = b.SYMBOL_ID AND b.rn = 1

WHERE o.SYMBOL IS NOT NULL
ORDER BY o.MARKET_CAPITALIZATION DESC;

-- ============================================================================
-- SECTOR PERFORMANCE VIEW
-- ============================================================================

CREATE OR REPLACE VIEW VW_SECTOR_PERFORMANCE AS
SELECT 
    SECTOR,
    COUNT(*) AS COMPANY_COUNT,
    AVG(MARKET_CAPITALIZATION) AS AVG_MARKET_CAP,
    MEDIAN(MARKET_CAPITALIZATION) AS MEDIAN_MARKET_CAP,
    AVG(PE_RATIO) AS AVG_PE_RATIO,
    AVG(PROFIT_MARGIN) AS AVG_PROFIT_MARGIN,
    AVG(DIVIDEND_YIELD) AS AVG_DIVIDEND_YIELD,
    AVG(BETA) AS AVG_BETA,
    
    -- Performance metrics
    AVG((WEEK_52_HIGH - WEEK_52_LOW) / NULLIF(WEEK_52_LOW, 0) * 100) AS AVG_52_WEEK_RANGE_PCT,
    
    SUM(MARKET_CAPITALIZATION) AS TOTAL_SECTOR_VALUE
    
FROM FIN_TRADE_EXTRACT.RAW.OVERVIEW
WHERE SECTOR IS NOT NULL 
  AND MARKET_CAPITALIZATION IS NOT NULL
GROUP BY SECTOR
ORDER BY TOTAL_SECTOR_VALUE DESC;

-- ============================================================================
-- PRICE PERFORMANCE VIEW
-- ============================================================================

CREATE OR REPLACE VIEW VW_PRICE_PERFORMANCE AS
SELECT 
    ts.SYMBOL,
    o.NAME AS COMPANY_NAME,
    o.SECTOR,
    
    -- Current price metrics
    ts.CLOSE AS CURRENT_PRICE,
    ts.ADJUSTED_CLOSE AS CURRENT_ADJUSTED_PRICE,
    ts.VOLUME AS CURRENT_VOLUME,
    ts.DATE AS PRICE_DATE,
    
    -- Calculate returns (comparing to 30 days ago)
    LAG(ts.ADJUSTED_CLOSE, 30) OVER (PARTITION BY ts.SYMBOL ORDER BY ts.DATE) AS PRICE_30_DAYS_AGO,
    
    CASE 
        WHEN LAG(ts.ADJUSTED_CLOSE, 30) OVER (PARTITION BY ts.SYMBOL ORDER BY ts.DATE) > 0 
        THEN ((ts.ADJUSTED_CLOSE - LAG(ts.ADJUSTED_CLOSE, 30) OVER (PARTITION BY ts.SYMBOL ORDER BY ts.DATE)) 
              / LAG(ts.ADJUSTED_CLOSE, 30) OVER (PARTITION BY ts.SYMBOL ORDER BY ts.DATE)) * 100
        ELSE NULL 
    END AS RETURN_30_DAY_PCT,
    
    -- Volume analysis
    AVG(ts.VOLUME) OVER (PARTITION BY ts.SYMBOL ORDER BY ts.DATE ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS AVG_VOLUME_30_DAY,
    
    -- Volatility (standard deviation of returns)
    STDDEV(ts.ADJUSTED_CLOSE) OVER (PARTITION BY ts.SYMBOL ORDER BY ts.DATE ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS VOLATILITY_30_DAY
    
FROM FIN_TRADE_EXTRACT.RAW.TIME_SERIES_DAILY_ADJUSTED ts
INNER JOIN FIN_TRADE_EXTRACT.RAW.OVERVIEW o ON ts.SYMBOL_ID = o.SYMBOL_ID
WHERE ts.DATE >= DATEADD('day', -60, CURRENT_DATE())  -- Last 60 days for calculation window
ORDER BY ts.SYMBOL, ts.DATE DESC;

-- ============================================================================
-- DIVIDEND ANALYSIS VIEW
-- ============================================================================

CREATE OR REPLACE VIEW VW_DIVIDEND_ANALYSIS AS
SELECT 
    o.SYMBOL,
    o.NAME AS COMPANY_NAME,
    o.SECTOR,
    o.INDUSTRY,
    o.DIVIDEND_PER_SHARE,
    o.DIVIDEND_YIELD,
    o.EX_DIVIDEND_DATE,
    o.DIVIDEND_DATE,
    
    -- Dividend sustainability metrics
    CASE 
        WHEN o.EPS > 0 THEN o.DIVIDEND_PER_SHARE / o.EPS 
        ELSE NULL 
    END AS PAYOUT_RATIO,
    
    -- Latest financial health for dividend sustainability
    i.NET_INCOME AS LATEST_NET_INCOME,
    cf.DIVIDEND_PAYOUT AS LATEST_DIVIDEND_PAYOUT,
    cf.OPERATING_CASHFLOW AS LATEST_OPERATING_CASHFLOW,
    
    CASE 
        WHEN cf.OPERATING_CASHFLOW > 0 THEN cf.DIVIDEND_PAYOUT / cf.OPERATING_CASHFLOW 
        ELSE NULL 
    END AS DIVIDEND_TO_CASHFLOW_RATIO,
    
    -- Classification
    CASE 
        WHEN o.DIVIDEND_YIELD > 4 THEN 'High Yield'
        WHEN o.DIVIDEND_YIELD > 2 THEN 'Moderate Yield'
        WHEN o.DIVIDEND_YIELD > 0 THEN 'Low Yield'
        ELSE 'No Dividend'
    END AS DIVIDEND_CATEGORY
    
FROM FIN_TRADE_EXTRACT.RAW.OVERVIEW o
LEFT JOIN (
    SELECT 
        SYMBOL_ID,
        NET_INCOME,
        ROW_NUMBER() OVER (PARTITION BY SYMBOL_ID ORDER BY FISCAL_DATE_ENDING DESC) as rn
    FROM FIN_TRADE_EXTRACT.RAW.INCOME_STATEMENT
    WHERE REPORT_TYPE = 'annual'
) i ON o.SYMBOL_ID = i.SYMBOL_ID AND i.rn = 1

LEFT JOIN (
    SELECT 
        SYMBOL_ID,
        DIVIDEND_PAYOUT,
        OPERATING_CASHFLOW,
        ROW_NUMBER() OVER (PARTITION BY SYMBOL_ID ORDER BY FISCAL_DATE_ENDING DESC) as rn
    FROM FIN_TRADE_EXTRACT.RAW.CASH_FLOW
    WHERE REPORT_TYPE = 'annual'
) cf ON o.SYMBOL_ID = cf.SYMBOL_ID AND cf.rn = 1

WHERE o.DIVIDEND_YIELD IS NOT NULL
ORDER BY o.DIVIDEND_YIELD DESC;

-- ============================================================================
-- COMMODITIES TRENDS VIEW
-- ============================================================================

CREATE OR REPLACE VIEW VW_COMMODITIES_TRENDS AS
SELECT 
    COMMODITY_NAME,
    DATE,
    VALUE AS PRICE,
    UNIT,
    NAME AS FULL_NAME,
    
    -- Price changes
    LAG(VALUE, 1) OVER (PARTITION BY COMMODITY_NAME ORDER BY DATE) AS PREVIOUS_PRICE,
    
    CASE 
        WHEN LAG(VALUE, 1) OVER (PARTITION BY COMMODITY_NAME ORDER BY DATE) > 0 
        THEN ((VALUE - LAG(VALUE, 1) OVER (PARTITION BY COMMODITY_NAME ORDER BY DATE)) 
              / LAG(VALUE, 1) OVER (PARTITION BY COMMODITY_NAME ORDER BY DATE)) * 100
        ELSE NULL 
    END AS DAILY_CHANGE_PCT,
    
    -- Moving averages
    AVG(VALUE) OVER (PARTITION BY COMMODITY_NAME ORDER BY DATE ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS MA_7_DAY,
    AVG(VALUE) OVER (PARTITION BY COMMODITY_NAME ORDER BY DATE ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS MA_30_DAY,
    
    -- Volatility
    STDDEV(VALUE) OVER (PARTITION BY COMMODITY_NAME ORDER BY DATE ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS VOLATILITY_30_DAY,
    
    API_RESPONSE_STATUS,
    CREATED_AT
    
FROM FIN_TRADE_EXTRACT.RAW.COMMODITIES
WHERE VALUE IS NOT NULL
ORDER BY COMMODITY_NAME, DATE DESC;

-- ============================================================================
-- ECONOMIC INDICATORS DASHBOARD VIEW
-- ============================================================================

CREATE OR REPLACE VIEW VW_ECONOMIC_INDICATORS AS
SELECT 
    ECONOMIC_INDICATOR_NAME,
    FUNCTION_NAME,
    MATURITY,
    DATE,
    VALUE AS INDICATOR_VALUE,
    UNIT,
    NAME AS FULL_NAME,
    
    -- Trend analysis
    LAG(VALUE, 1) OVER (PARTITION BY ECONOMIC_INDICATOR_NAME, MATURITY ORDER BY DATE) AS PREVIOUS_VALUE,
    
    CASE 
        WHEN LAG(VALUE, 1) OVER (PARTITION BY ECONOMIC_INDICATOR_NAME, MATURITY ORDER BY DATE) IS NOT NULL 
        THEN VALUE - LAG(VALUE, 1) OVER (PARTITION BY ECONOMIC_INDICATOR_NAME, MATURITY ORDER BY DATE)
        ELSE NULL 
    END AS ABSOLUTE_CHANGE,
    
    -- Moving averages for smoothing
    AVG(VALUE) OVER (PARTITION BY ECONOMIC_INDICATOR_NAME, MATURITY ORDER BY DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS MA_3_PERIOD,
    
    -- Trend direction
    CASE 
        WHEN VALUE > LAG(VALUE, 1) OVER (PARTITION BY ECONOMIC_INDICATOR_NAME, MATURITY ORDER BY DATE) THEN 'Up'
        WHEN VALUE < LAG(VALUE, 1) OVER (PARTITION BY ECONOMIC_INDICATOR_NAME, MATURITY ORDER BY DATE) THEN 'Down'
        ELSE 'Unchanged'
    END AS TREND_DIRECTION,
    
    API_RESPONSE_STATUS,
    CREATED_AT
    
FROM FIN_TRADE_EXTRACT.RAW.ECONOMIC_INDICATORS
WHERE VALUE IS NOT NULL
ORDER BY ECONOMIC_INDICATOR_NAME, MATURITY, DATE DESC;

-- ============================================================================
-- INSIDER TRADING ACTIVITY VIEW
-- ============================================================================

CREATE OR REPLACE VIEW VW_INSIDER_ACTIVITY AS
SELECT 
    it.SYMBOL,
    o.NAME AS COMPANY_NAME,
    o.SECTOR,
    it.TRANSACTION_DATE,
    it.EXECUTIVE,
    it.EXECUTIVE_TITLE,
    it.ACQUISITION_OR_DISPOSAL,
    it.SHARES,
    it.SHARE_PRICE,
    it.SHARES * it.SHARE_PRICE AS TRANSACTION_VALUE,
    
    -- Aggregate metrics by symbol
    COUNT(*) OVER (PARTITION BY it.SYMBOL ORDER BY it.TRANSACTION_DATE ROWS BETWEEN 30 PRECEDING AND CURRENT ROW) AS TRANSACTIONS_30_DAY,
    
    SUM(CASE WHEN it.ACQUISITION_OR_DISPOSAL = 'A' THEN it.SHARES * it.SHARE_PRICE ELSE 0 END) 
        OVER (PARTITION BY it.SYMBOL ORDER BY it.TRANSACTION_DATE ROWS BETWEEN 30 PRECEDING AND CURRENT ROW) AS PURCHASES_30_DAY_VALUE,
    
    SUM(CASE WHEN it.ACQUISITION_OR_DISPOSAL = 'D' THEN it.SHARES * it.SHARE_PRICE ELSE 0 END) 
        OVER (PARTITION BY it.SYMBOL ORDER BY it.TRANSACTION_DATE ROWS BETWEEN 30 PRECEDING AND CURRENT ROW) AS SALES_30_DAY_VALUE,
    
    -- Transaction type classification
    CASE 
        WHEN it.ACQUISITION_OR_DISPOSAL = 'A' THEN 'Purchase'
        WHEN it.ACQUISITION_OR_DISPOSAL = 'D' THEN 'Sale'
        ELSE 'Unknown'
    END AS TRANSACTION_TYPE,
    
    -- Size classification
    CASE 
        WHEN it.SHARES * it.SHARE_PRICE > 1000000 THEN 'Large (>$1M)'
        WHEN it.SHARES * it.SHARE_PRICE > 100000 THEN 'Medium ($100K-$1M)'
        WHEN it.SHARES * it.SHARE_PRICE > 10000 THEN 'Small ($10K-$100K)'
        ELSE 'Very Small (<$10K)'
    END AS TRANSACTION_SIZE_CATEGORY,
    
    it.CREATED_AT
    
FROM FIN_TRADE_EXTRACT.RAW.INSIDER_TRANSACTIONS it
INNER JOIN FIN_TRADE_EXTRACT.RAW.OVERVIEW o ON it.SYMBOL_ID = o.SYMBOL_ID
WHERE it.SHARES IS NOT NULL AND it.SHARE_PRICE IS NOT NULL
ORDER BY it.TRANSACTION_DATE DESC, it.SYMBOL;

-- ============================================================================
-- SHOW CREATED VIEWS
-- ============================================================================

SHOW VIEWS IN SCHEMA ANALYTICS;

-- Get view details
SELECT 
    TABLE_NAME AS VIEW_NAME,
    COMMENT
FROM INFORMATION_SCHEMA.VIEWS 
WHERE TABLE_SCHEMA = 'ANALYTICS'
ORDER BY TABLE_NAME;