-- ============================================================================
-- SIMPLE STAGING TABLE APPROACH
-- Load full CSV to staging table, then select only needed columns
-- ============================================================================

USE DATABASE FIN_TRADE_EXTRACT;
USE SCHEMA RAW;

-- Create a staging table that matches the CSV exactly (50 columns)
CREATE OR REPLACE TABLE RAW.OVERVIEW_STAGING (
    SYMBOL_ID VARCHAR(50),
    SYMBOL VARCHAR(20),
    ASSET_TYPE VARCHAR(50),
    NAME VARCHAR(500),
    DESCRIPTION TEXT,
    CIK VARCHAR(20),
    EXCHANGE VARCHAR(50),
    CURRENCY VARCHAR(10),
    COUNTRY VARCHAR(100),
    SECTOR VARCHAR(100),
    INDUSTRY VARCHAR(200),
    ADDRESS TEXT,
    OFFICIAL_SITE VARCHAR(500),
    FISCAL_YEAR_END VARCHAR(20),
    -- Financial columns 15-47 (we'll load but ignore)
    MARKET_CAPITALIZATION VARCHAR(50),
    EBITDA VARCHAR(50),
    PE_RATIO VARCHAR(50),
    PEG_RATIO VARCHAR(50),
    BOOK_VALUE VARCHAR(50),
    DIVIDEND_PER_SHARE VARCHAR(50),
    DIVIDEND_YIELD VARCHAR(50),
    EPS VARCHAR(50),
    REVENUE_PER_SHARE_TTM VARCHAR(50),
    PROFIT_MARGIN VARCHAR(50),
    OPERATING_MARGIN_TTM VARCHAR(50),
    RETURN_ON_ASSETS_TTM VARCHAR(50),
    RETURN_ON_EQUITY_TTM VARCHAR(50),
    REVENUE_TTM VARCHAR(50),
    GROSS_PROFIT_TTM VARCHAR(50),
    DILUTED_EPS_TTM VARCHAR(50),
    QUARTERLY_EARNINGS_GROWTH_YOY VARCHAR(50),
    QUARTERLY_REVENUE_GROWTH_YOY VARCHAR(50),
    ANALYST_TARGET_PRICE VARCHAR(50),
    TRAILING_PE VARCHAR(50),
    FORWARD_PE VARCHAR(50),
    PRICE_TO_SALES_RATIO_TTM VARCHAR(50),
    PRICE_TO_BOOK_RATIO VARCHAR(50),
    EV_TO_REVENUE VARCHAR(50),
    EV_TO_EBITDA VARCHAR(50),
    BETA VARCHAR(50),
    WEEK_52_HIGH VARCHAR(50),
    WEEK_52_LOW VARCHAR(50),
    DAY_50_MOVING_AVERAGE VARCHAR(50),
    DAY_200_MOVING_AVERAGE VARCHAR(50),
    SHARES_OUTSTANDING VARCHAR(50),
    DIVIDEND_DATE VARCHAR(50),
    EX_DIVIDEND_DATE VARCHAR(50),
    -- Status and timestamps
    API_RESPONSE_STATUS VARCHAR(50),
    CREATED_AT VARCHAR(50),
    UPDATED_AT VARCHAR(50)
);

-- Load all CSV files into staging table (simple direct load)
COPY INTO RAW.OVERVIEW_STAGING
FROM @OVERVIEW_STAGE
PATTERN = '.*overview_20250928.*\.csv'
FILE_FORMAT = (TYPE = 'CSV' SKIP_HEADER = 1 FIELD_OPTIONALLY_ENCLOSED_BY = '"')
ON_ERROR = 'CONTINUE';

-- Check staging data
SELECT COUNT(*) as staging_records FROM RAW.OVERVIEW_STAGING;
SELECT SYMBOL, NAME, SECTOR FROM RAW.OVERVIEW_STAGING LIMIT 5;

-- Clear the main table
TRUNCATE TABLE RAW.OVERVIEW;

-- Insert only the company descriptor columns from staging to main table
INSERT INTO RAW.OVERVIEW (
    SYMBOL_ID, SYMBOL, ASSETTYPE, NAME, DESCRIPTION, CIK, EXCHANGE, 
    CURRENCY, COUNTRY, SECTOR, INDUSTRY, ADDRESS, OFFICIALSITE, 
    FISCALYEAREND, STATUS, CREATED_AT, UPDATED_AT,
    BATCH_ID, SOURCE_FILE_NAME
)
SELECT 
    SYMBOL_ID,
    SYMBOL,
    ASSET_TYPE,
    NAME,
    DESCRIPTION,
    CIK,
    EXCHANGE,
    CURRENCY,
    COUNTRY,
    SECTOR,
    INDUSTRY,
    ADDRESS,
    OFFICIAL_SITE,
    FISCAL_YEAR_END,
    API_RESPONSE_STATUS,
    TRY_CAST(CREATED_AT AS TIMESTAMP),
    TRY_CAST(UPDATED_AT AS TIMESTAMP),
    'MANUAL_LOAD_20250928',
    'staging_load'
FROM RAW.OVERVIEW_STAGING;

-- Clean up staging table
DROP TABLE RAW.OVERVIEW_STAGING;

-- Final verification
SELECT COUNT(*) as total_records FROM RAW.OVERVIEW;
SELECT COUNT(*) as records_with_names FROM RAW.OVERVIEW WHERE NAME IS NOT NULL;

-- Show sample of properly loaded data
SELECT 
    SYMBOL, 
    NAME, 
    SECTOR, 
    INDUSTRY, 
    EXCHANGE,
    STATUS
FROM RAW.OVERVIEW 
WHERE NAME IS NOT NULL
ORDER BY SYMBOL 
LIMIT 20;

-- Summary by sector
SELECT 
    SECTOR,
    COUNT(*) as company_count
FROM RAW.OVERVIEW 
WHERE NAME IS NOT NULL AND SECTOR IS NOT NULL
GROUP BY SECTOR 
ORDER BY company_count DESC;