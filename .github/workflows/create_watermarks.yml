name: Create ETL Watermarks Table

on:
  workflow_dispatch:
    inputs:
      force_recreate:
        description: 'Force recreate table (drops existing table first)'
        required: false
        type: boolean
        default: true

jobs:
  create-watermarks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decode Snowflake private key
        run: echo "${{ secrets.SNOWFLAKE_PRIVATE_KEY_DER_B64 }}" | base64 -d > snowflake_rsa_key.der
        working-directory: ${{ github.workspace }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python

      - name: Create ETL Watermarks Table
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          echo "ðŸš€ Creating ETL_WATERMARKS table from SQL file"
          echo "ðŸ“… Timestamp: $(date)"
          echo "Using: snowflake/setup/create_watermark_table.sql"
          python scripts/watermarking/create_watermarks_from_sql.py

      - name: Generate Watermark Report
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          echo "ðŸ“Š Generating watermark report..."
          python -c "
          import snowflake.connector
          import os
          config = {
              'account': os.getenv('SNOWFLAKE_ACCOUNT'),
              'user': os.getenv('SNOWFLAKE_USER'),
              'private_key_path': 'snowflake_rsa_key.der',
              'warehouse': os.getenv('SNOWFLAKE_WAREHOUSE'),
              'database': os.getenv('SNOWFLAKE_DATABASE'),
              'schema': os.getenv('SNOWFLAKE_SCHEMA')
          }
          conn = snowflake.connector.connect(**config)
          cursor = conn.cursor()
          cursor.execute('''
              SELECT 
                  TABLE_NAME,
                  COUNT(*) as SYMBOL_COUNT,
                  COUNT(CASE WHEN CONSECUTIVE_FAILURES = 0 THEN 1 END) as SUCCESSFUL,
                  COUNT(CASE WHEN CONSECUTIVE_FAILURES > 0 THEN 1 END) as FAILED,
                  MAX(LAST_SUCCESSFUL_RUN) as MOST_RECENT_SUCCESS
              FROM FIN_TRADE_EXTRACT.RAW.ETL_WATERMARKS
              GROUP BY TABLE_NAME
              ORDER BY TABLE_NAME
          ''')
          results = cursor.fetchall()
          print('ðŸ“‹ Current ETL Watermarks Summary:')
          print('=' * 80)
          print(f'{"Table Name":<30} | {"Symbols":<8} | {"Success":<8} | {"Failed":<8} | {"Last Success":<20}')
          print('=' * 80)
          for row in results:
              last_success = str(row[4]) if row[4] else 'Never'
              print(f'{row[0]:<30} | {row[1]:<8} | {row[2]:<8} | {row[3]:<8} | {last_success:<20}')
          cursor.close()
          conn.close()
          "

      - name: Save Results
        run: |
          echo "ðŸ’¾ Saving watermarking results..."
          cat > watermark_results.json << EOF
          {
            "force_recreate": "${{ github.event.inputs.force_recreate }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "status": "completed"
          }
          EOF

      - name: Clean up private key
        run: rm -f snowflake_rsa_key.der
        working-directory: ${{ github.workspace }}

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: watermark-results-${{ github.run_number }}
          path: watermark_results.json
          retention-days: 30